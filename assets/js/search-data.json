{
  
    
        "post0": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2023/04/23/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2023/04/23/ErrorPractice.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "CPT Plans",
            "content": "Plan to Complete . Fix Typeerror by next week | Improve the frontend to look more visually appealing | add an update feature so users can easily update their comments | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/04/23/CPT-Plans.html",
            "relUrl": "/week%2027/2023/04/23/CPT-Plans.html",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "3.5-3.7 Hacks",
            "content": "Hack 1 . Logical Operators . not Shows/does the opposite of the data | mostly used for true false | ex. if you assign red to false, and then you have a variablle called result that you assign the value not(red) to, then it will output true | code example: | . | . isRed = False green = not(isRed) print(green) . and evaluates two conditions together and if both conditions are met and only if both conditions are met, will the final result be shown | ex. if flower = red and flower = green print(&quot;christmas flower&quot;) the flower has to be both red and green for the algorithm to print chirstmas flower, if only red, christmas flower will not be printed | code example: | . | . flower = 50 if flower &gt;= 1 and flower &lt;= 100: print(&quot;bouquet&quot;) if flower &gt;= 100: print(&quot;garden&quot;) . or only one of the two conditons has to be met | ex. if temp &gt;=100 or temp &lt;= 20 print (&quot;stay home&quot;) | code example: | . | . temp = 101 if temp &gt;= 100 or temp &lt;= 20: print(&quot;stay home&quot;) . Hack 2 . Conditionals . evaluates actions in the program (true or false) . Selection: the result of this block of a selection depends on if a condition is true or false Algorithm: instructions/steps to accomplish a certain task, or solve a different problem Conditional Statement: executes certain statements depending on if it is true or false . Binary Conditional Logic . print(&quot;please enter a number&quot;) x = int(input()) if x % 2 == 0: # if x is divisible by 2 with no remainder print(x, &quot;is even&quot;) else: # if x is not divisible by 2 with no remainder print(x, &quot;is odd&quot;) . Nested statement 1 . print(&quot;are you happy?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;no&quot;: print(&quot;why be sad when you can be glad&quot;) if reply == &quot;yes&quot;: print(&quot;good for you&quot;) . Nested Statement 2 . print(&quot;what holiday do you celebrate?&quot;) reply = input(&quot;Christmas or Hanukkah&quot;) if reply == &quot;Hanukkah&quot;: print(&quot;Happy hanukkah!&quot;) elif reply == &quot;Christmas&quot;: print(&quot;Merry Chirstmas!&quot;) else: print(&quot;Happy Holidays!&quot;) . Nested Statement 3 . print(&quot;are you a swiftie?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;yes&quot;: print(&quot;slay!&quot;) else: print(&quot;oh.&quot;) . display 4 statements . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) . Stem or no stem? . print(&quot;are you interested in stem?&quot;) reply1 = input(&quot;yes or no&quot;) if reply1 == &quot;yes&quot;: list1 = [&quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;AP Statistics&quot;] print(&quot;you should take&quot;, list1) else: list2 = [&quot;AP Human Geography&quot;, &quot;AP World&quot;, &quot;AP English Language&quot;] print(&quot;you should take&quot;, list2) .",
            "url": "https://clairechen3.github.io/clairerepos/hacks57",
            "relUrl": "/hacks57",
            "date": " • Apr 23, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Big Idea 3 Hacks",
            "content": "Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . All Questions . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays Tic-tac-toe game board: This is a classic example of a 2D array, where the game board is represented as a 3x3 grid. | . | . - Spreadsheet software: Spreadsheets are often organized as a 2D arrays for a modern-day game that could be classified as a 2D array, a good example would be the popular puzzle game &quot;Sudoku&quot;. In Sudoku, the game board is represented as a 9x9 grid of cells, with each cell containing a number from 1 to 9. The game involves filling in the missing numbers in each row, column, and 3x3 sub-grid, following certain rules. The game board can be easily represented as a 2D array in programming, with each cell being an element in the array.y of cells, where each cell has a row and column index. - Pixel art: Pixel art is often created on a 2D grid, where each square represents a pixel in the image. . What is a modern day game that could be classified as a 2D array As for a modern-day game that could be classified as a 2D array, a good example would be the popular puzzle game &quot;Sudoku&quot;. In Sudoku, the game board is represented as a 9x9 grid of cells, with each cell containing a number from 1 to 9. The game involves filling in the missing numbers in each row, column, and 3x3 sub-grid, following certain rules. The game board can be easily represented as a 2D array in programming, with each cell being an element in the array. ## How I used 2D Arrays (game example) | . | Describe a 2D array in your own words A 2D array is a grid that stores data in rows and columns, commonly used in programming to represent data in a two-dimensional space. ## 2: IterationRobot Game:Finn Carpenter- What is the defenition of iteration in your own words . | Iterations mean repeating a set of instructions or steps multiple times, often used in programming to execute a block of code repeatedly to achieve a specific goal. ## How I used iteration (game example) | . | What parts of the code use iteration the movements ## How I used List to make a game | . | Explain which parts of the code use lists it uses a list to store the words | . | Explain what list manipulation is happening in that part a word is being randomly selected from the list and being scrambled | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . limit = int(input(&quot;Enter a limit for the Fibonacci sequence: &quot;)) # initialize the first two numbers in the sequence a, b = 0, 1 # iterate through the sequence and print each number while a &lt; limit: print(a) a, b = b, a + b . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works The game is played on a 3x3 board represented by a nested list called &#39;board&#39;. The &#39;print_board()&#39; function prints the current state of the board, showing the row and column indices and the symbols (&#39;X&#39; or &#39;O&#39;) that have been placed on the board. The &#39;check_win(player)&#39; function checks if the player who made the move has won the game. It checks for winning combinations on the rows, columns, and diagonals of the board. The &#39;check_tie()&#39; function checks if the game is a tie. If all the spaces on the board have been filled and no player has won, the game is a tie. The &#39;play_game()&#39; function starts the game loop. It initializes the player to &#39;X&#39; and the turn counter to 0. In each iteration of the loop, it prints the current state of the board, prompts the player for their move, checks if the move is valid, updates the board, checks if the player has won or the game is a tie, switches to the other player if the game is not over, and repeats the loop. Finally, the &#39;play_game()&#39; function is called to start the game. It prints the initial state of the board and starts the game loop until a winner is found or the game ends in a tie. | . | Give 3 Examples of games that can be made from 2D arrays . Tic-Tac-Toe: A 2D array can represent a 3x3 grid for the game, with each element storing a value (&#39;X&#39;, &#39;O&#39;, or empty) for the current state of the game. . | Minesweeper: A 2D array can represent a grid for the game, with each element storing a value (mine or not, covered or uncovered) for the state of each cell. . | Sokoban: A 2D array can represent a grid for the game, with each element representing a tile. The player and boxes can be separate objects that move around the grid, with the state of the game updated by checking for collisions and events. . | . | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries Lists are ordered collections of items, where each item is assigned an index based on its position in the list. Lists are created using square brackets, and items are separated by commas. Lists can contain any type of data, including other lists. | . | Make a code block that manipulates either a list or a dictionary | . my_dict = {&#39;apple&#39;: 3, &#39;banana&#39;: 1, &#39;orange&#39;: 2} # Convert the dictionary into a list of tuples my_list = list(my_dict.items()) # Sort the list by the values in descending order my_list.sort(key=lambda x: x[1], reverse=True) # Convert the list back to a dictionary sorted_dict = dict(my_list) print(sorted_dict) . {&#39;apple&#39;: 3, &#39;orange&#39;: 2, &#39;banana&#39;: 1} .",
            "url": "https://clairechen3.github.io/clairerepos/week%2030/2023/04/21/PlaygroundHacks.html",
            "relUrl": "/week%2030/2023/04/21/PlaygroundHacks.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "P4-M 4/24 Big Idea 3",
            "content": "Introduction: Zeen . Hello, my name is zeen and today we will be presenting big idea 3. Our topics include 2d arrays, iteration, and lists and dictionaries. . Objectives . Master the concepts of iteration, list, 2d-arrays, Dictionaries, and APIs . Vocab . Here is some vocab during the lesson, you should be familar with them already no need for me to read these out, now I will pass the speaking off to Kush . Iteration: A process that repates itself | Array: Sometimes called a list, can keep strings and intergers inside it | 2D-Array: A collection of data elements arranged in a grid-like structure with rows and columns | Mutable: the ability to be changed or modified | Key: A Singular identifier that is associated with a certin value | . 1: 2D Array . Tic Tac Toe:Kush Sirohi . What are some examples of 2d Arrays Tic-tac-toe game board: This is a classic example of a 2D array, where the game board is represented as a 3x3 grid. | . | . - Spreadsheet software: Spreadsheets are often organized as a 2D arraAs for a modern-day game that could be classified as a 2D array, a good example would be the popular puzzle game &quot;Sudoku&quot;. In Sudoku, the game board is represented as a 9x9 grid of cells, with each cell containing a number from 1 to 9. The game involves filling in the missing numbers in each row, column, and 3x3 sub-grid, following certain rules. The game board can be easily represented as a 2D array in programming, with each cell being an element in the array.y of cells, where each cell has a row and column index. - Pixel art: Pixel art is often created on a 2D grid, where each square represents a pixel in the image. . What is a modern day game that could be classified as a 2D array As for a modern-day game that could be classified as a 2D array, a good example would be the popular puzzle game &quot;Sudoku&quot;. In Sudoku, the game board is represented as a 9x9 grid of cells, with each cell containing a number from 1 to 9. The game involves filling in the missing numbers in each row, column, and 3x3 sub-grid, following certain rules. The game board can be easily represented as a 2D array in programming, with each cell being an element in the array. | . | . array = [&quot;Hello&quot;, &quot;Hi&quot;, &quot;Whats up&quot;] twoDArray = [[&quot;Name&quot;, &quot;ID&quot;, &quot;Age&quot;], [&quot;Kush&quot;, &quot;1&quot;, &quot;16&quot;], [&quot;Finn&quot;, &quot;2&quot;, &quot;16&quot;]] print(f&quot;This is a normal array: {array}&quot;) print(&quot;This is a 2D array&quot;) for row in twoDArray: print(row) . This is a normal array: [&#39;Hello&#39;, &#39;Hi&#39;, &#39;Whats up&#39;] This is a 2D array [&#39;Name&#39;, &#39;ID&#39;, &#39;Age&#39;] [&#39;Kush&#39;, &#39;1&#39;, &#39;16&#39;] [&#39;Finn&#39;, &#39;2&#39;, &#39;16&#39;] . How I used 2D Arrays (game example) . - Describe a 2D array in your own words . board = [[&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;], [&#39; &#39;, &#39; &#39;, &#39; &#39;]] # Function to print the current state of the game board def print_board(): print(&quot; 0 1 2&quot;) for i in range(3): print(i, end=&#39; &#39;) for j in range(3): print(board[i][j], end=&#39; &#39;) print() # Function to check if a player has won the game def check_win(player): # Check rows for a win for i in range(3): if board[i][0] == player and board[i][1] == player and board[i][2] == player: return True # Check columns for a win for j in range(3): if board[0][j] == player and board[1][j] == player and board[2][j] == player: return True # Check diagonals for a win if board[0][0] == player and board[1][1] == player and board[2][2] == player: return True if board[0][2] == player and board[1][1] == player and board[2][0] == player: return True # If no win condition is met, return False return False # Function to check if the game is a tie def check_tie(): for i in range(3): for j in range(3): if board[i][j] == &#39; &#39;: return False return True # Function to play the game def play_game(): # Initialize player and turn counter player = &#39;X&#39; turns = 0 # Loop until the game is over while True: # Print the current state of the board print_board() # Get the player’s move row = int(input(f&quot;{player}&#39;s turn. Enter row (0-2): &quot;)) col = int(input(f&quot;{player}&#39;s turn. Enter column (0-2): &quot;)) # Check if the move is valid if board[row][col] == &#39; &#39;: board[row][col] = player turns += 1 # Check if the player has won if check_win(player): print_board() print(f&quot;{player} wins!&quot;) return # Check if the game is a tie if check_tie(): print_board() print(&quot;It&#39;s a tie!&quot;) return # Switch players player = &#39;O&#39; if player == &#39;X&#39; else &#39;X&#39; else: print(&quot;That space is already taken. Try again.&quot;) # Start the game play_game() . 0 1 2 0 1 2 0 1 2 0 1 X 2 0 1 2 0 O 1 X 2 0 1 2 0 O 1 X X 2 . ValueError Traceback (most recent call last) /home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in &lt;cell line: 72&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=68&#39;&gt;69&lt;/a&gt; print(&#34;That space is already taken. Try again.&#34;) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=70&#39;&gt;71&lt;/a&gt; # Start the game &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=71&#39;&gt;72&lt;/a&gt; play_game() /home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb Cell 6 in play_game() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=48&#39;&gt;49&lt;/a&gt; # Get the player’s move &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=49&#39;&gt;50&lt;/a&gt; row = int(input(f&#34;{player}&#39;s turn. Enter row (0-2): &#34;)) &gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=50&#39;&gt;51&lt;/a&gt; col = int(input(f&#34;{player}&#39;s turn. Enter column (0-2): &#34;)) &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=51&#39;&gt;52&lt;/a&gt; # Check if the move is valid &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/home/claire/vscode/clairerepos/_notebooks/2023-04-21-EOYPLAYGROUND.ipynb#W5sdnNjb2RlLXJlbW90ZQ%3D%3D?line=52&#39;&gt;53&lt;/a&gt; if board[row][col] == &#39; &#39;: ValueError: invalid literal for int() with base 10: &#39;&#39; . 2: Iteration . &gt; Robot Game:Finn Carpenter- What is the defenition of iteration in your own words . times = 0 numbers = [1, 2, 3, 4, 5] ## Loops for i in range(5): print(&quot;hi&quot;) while times &lt;= 5: print(&quot;hello&quot;) times = times + 1 ## Function with a parameters def print_numbers(x): for num in x: print(num) print_numbers(numbers) . hi hi hi hi hi hello hello hello hello hello hello 1 2 3 4 5 . Iteration Game . Link to the game | Play the levels (only play the first 2 in class) | Explain how the game relates to itertation | | . How I used iteration (game example) . - What parts of the code use iteration . function run() { // Read input values from the HTML document and convert them to integers. UPinput = parseInt(document.getElementById(&quot;up&quot;).value); DOWNinput = parseInt(document.getElementById(&quot;down&quot;).value); LEFTinput = parseInt(document.getElementById(&quot;left&quot;).value); RIGHTinput = parseInt(document.getElementById(&quot;right&quot;).value); looper = parseInt(document.getElementById(&quot;loop&quot;).value); runner.style.opacity = 0; // Create an array to hold the movements. let movements = []; // Push &#39;up&#39; movements to the array. for (let l = 0; l &lt; looper; l++) { for (let k = 0; k &lt; UPinput; k++) { movements.push(up); } // Push &#39;down&#39; movements to the array. for (let i = 0; i &lt; DOWNinput; i++) { movements.push(down); } // Push &#39;left&#39; movements to the array. for (let a = 0; a &lt; LEFTinput; a++) { movements.push(left); } // Push &#39;right&#39; movements to the array. for (let c = 0; c &lt; RIGHTinput; c++) { movements.push(right); } } // Set the initial index to 0 and execute each movement in sequence with a delay of 800 milliseconds. let index = 0; let intervalId = setInterval(() =&gt; { // If the end of the movements array has been reached, stop executing movements. if (index &gt;= movements.length) { clearInterval(intervalId); win(); // Call the win function. return; } movements[index](); // Execute the movement at the current index. index++; // Increment the index. }, 800); } . Input In [5] function run() { ^ SyntaxError: invalid syntax . 3: List and Dictionaries . Scramble Game:Edwin . List = [1, 2, 3, 4, 5] Dict = { 1: &quot;Hi&quot;, 2: &quot;Hello&quot;, 3: &quot;Whats Up&quot; } # Why Do I call 0 for the first thing in a list, but 1 for Dict # because the index is already set to 1 in the dictionary print(List[0]) print(Dict[1]) . 1 Hi . How I used a dictonary to make a game . Memory Game:James- Link . | . How I used List to make a game . - Explain which parts of the code use lists . - Explain what list manipulation is happening in that part . import random word_list = [&quot;python&quot;, &quot;computer&quot;, &quot;programming&quot;, &quot;algorithm&quot;, &quot;database&quot;, &quot;function&quot;, &quot;variable&quot;, &quot;loop&quot;, &quot;iteration&quot;, &quot;array&quot;, &quot;mutable&quot;, &quot;insertion&quot;, &quot;deletion&quot;, &quot;key&quot;, &quot;API&quot;] word = random.choice(word_list) scrambled_word = &quot;&quot;.join(random.sample(word, len(word))) print(f&quot;Unscramble the following Computer Science Word: {scrambled_word}&quot;) hints = 1 guesses = 1 guess = &quot;&quot; while guess != word and guesses &lt;= 4: guess = input(&quot;What&#39;s the unscrambled word? &quot;).lower() if guess != word: print(&quot;Sorry, that&#39;s not the word. Try again!&quot;) if guesses == 1: guesses += 1 elif guesses == 2: print(f&quot;Hint 1: The first letter of the word is &#39;{word[0]}&#39;&quot;) guesses += 1 elif guesses == 3: print(f&quot;Hint 2: The second letter of the word is &#39;{word[1]}&#39;&quot;) guesses += 1 else: print(f&quot;All 4 Guesses have been used, you didn&#39;t unscramble the word, the word was {word}&quot;) guesses += 1 else: print(&quot;Congratulations, you unscrambled the word!&quot;) . Unscramble the following Computer Science Word: hnptyo Congratulations, you unscrambled the word! . Hacks: Your Score/1 . General 0.3 . Copy this noteboook into your personal fastpages | Answer all questions put the question in a new markdown block (so we can grade faster) | . | . Iteration 0.2 (can get up to 0.23) . Get to level 5 Take ScreenShots of your name inside the box an put them in your ticket | . | Create a code segment with iteration that does something cool | . 2D array 0.2 (can get up to 0.23) . Explain how the tic tac toe game works | Give 3 Examples of games that can be made from 2D arrays | . List and Dictionaries 0.2 (can get up to 0.23) . Explain the differences between Lists and Dictionaries | Make a code block that manipulates either a list or a dictionary | .",
            "url": "https://clairechen3.github.io/clairerepos/2023/04/21/EOYPLAYGROUND.html",
            "relUrl": "/2023/04/21/EOYPLAYGROUND.html",
            "date": " • Apr 21, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "MCQ Corrections 4/16/2023",
            "content": "the locations should be distributed so the experiment should not take place in all the same place. Since it needs at least 200 characters, there would have to be 8 bits (2^8=256) the number of steps is just the number of items squared,so it should run in a reasonable time .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/04/17/Corrections.html",
            "relUrl": "/week%2027/2023/04/17/Corrections.html",
            "date": " • Apr 17, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Fixing Backend",
            "content": "right now my DNS is pointing to the wrong host, Most of my stuff is on Yeung&#39;s instance, but my DNS is pointing to 3.130.255.192 which is the IP to Mortensen host . My plan is to get a new domain name, that points to the right IP (Yeung&#39;s) and then edit my nginx file to be the new domain name. From there I will do the certbot steps and if all goes well, I will delete from Yeung&#39;s instance and move to Mortensen&#39;s instance. . getting the correct IP setting that IP to my new domain flowperiod . Ok, now I am going to update the domain in my nginx file . change from flowhealth to flowperiod create symbolic link (myUniqueName: gacc) test successful! restart nginx flowperiod is up and running! . Now we can move on to certbot! success! flowperiod is now secure .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/04/07/fixingawsbackend.html",
            "relUrl": "/week%2027/2023/04/07/fixingawsbackend.html",
            "date": " • Apr 7, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Page 1 Hacks",
            "content": "&lt;style&gt; &lt;/style&gt; .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/04/07/Page1Hacks.html",
            "relUrl": "/week%2027/2023/04/07/Page1Hacks.html",
            "date": " • Apr 7, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Hashmaps",
            "content": "What is a Hashtable/Hashmap? . A hashtable is a data structure that with a collection of key-value pairs, where each key maps to a value, and the keys must be unique and hashable. . In Python there is a built in hashtable known as a dictionary. | . The primary purpose of a hashtable is to provide efficient lookup, insertion, and deletion operations. When an element is to be inserted into the hashtable, a hash function is used to map the key to a specific index in the underlying array that is used to store the key-value pairs. The value is then stored at that index. When searching for a value, the hash function is used again to find the index where the value is stored. . The key advantage of a hashtable over other data structures like arrays and linked lists is its average-case time complexity for lookup, insertion, and deletion operations. . The typical time complexity of a hashtable is . | . What is Hashing and Collision? . Hashing is the process of mapping a given key to a value in a hash table or hashmap, using a hash function. The hash function takes the key as input and produces a hash value or hash code, which is then used to determine the index in the underlying array where the value is stored. The purpose of hashing is to provide a quick and efficient way to access data, by eliminating the need to search through an entire data structure to find a value. . However, it is possible for two different keys to map to the same hash value, resulting in a collision. When a collision occurs, there are different ways to resolve it, depending on the collision resolution strategy used. . Python&#39;s dictionary implementation is optimized to handle collisions efficiently, and the performance of the dictionary is generally very good, even in the presence of collisions. However, if the number of collisions is very high, the performance of the dictionary can degrade, so it is important to choose a good hash function that minimizes collisions when designing a Python dictionary. . What is a Set? . my_set = set([1, 2, 3, 2, 1]) print(my_set) # What do you notice in the output? # it is in dictionary format # it gets rid of all duplicates # Why do you think Sets are in the same tech talk as Hashmaps/Hashtables? # because it organizes data # they both can&#39;t have collisions . {1, 2, 3} . Dictionary Example . Below are just some basic features of a dictionary. As always, documentation is always the main source for all the full capablilties. . lover_album = { &quot;title&quot;: &quot;Lover&quot;, &quot;artist&quot;: &quot;Taylor Swift&quot;, &quot;year&quot;: 2019, &quot;genre&quot;: [&quot;Pop&quot;, &quot;Synth-pop&quot;], &quot;tracks&quot;: { 1: &quot;I Forgot That You Existed&quot;, 2: &quot;Cruel Summer&quot;, 3: &quot;Lover&quot;, 4: &quot;The Man&quot;, 5: &quot;The Archer&quot;, 6: &quot;I Think He Knows&quot;, 7: &quot;Miss Americana &amp; The Heartbreak Prince&quot;, 8: &quot;Paper Rings&quot;, 9: &quot;Cornelia Street&quot;, 10: &quot;Death By A Thousand Cuts&quot;, 11: &quot;London Boy&quot;, 12: &quot;Soon You&#39;ll Get Better (feat. Dixie Chicks)&quot;, 13: &quot;False God&quot;, 14: &quot;You Need To Calm Down&quot;, 15: &quot;Afterglow&quot;, 16: &quot;Me! (feat. Brendon Urie of Panic! At The Disco)&quot;, 17: &quot;It&#39;s Nice To Have A Friend&quot;, 18: &quot;Daylight&quot; } } # What data structures do you see? # list (genre) # dictionary (tracks) # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}} . print(lover_album.get(&#39;tracks&#39;)) # or print(lover_album[&#39;tracks&#39;]) . {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;} . print(lover_album.get(&#39;tracks&#39;)[4]) # or print(lover_album[&#39;tracks&#39;][4]) . The Man The Man . lover_album[&quot;producer&quot;] = [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] # What can you change to make sure there are no duplicate producers? # make it a set # take out taylor swift # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . lover_album[&quot;tracks&quot;].update({19: &quot;All Of The Girls You Loved Before&quot;}) # How would add an additional genre to the dictionary, like electropop? # you cannot use .update because it is a list, ut you can use append # Printing the dictionary print(lover_album) . {&#39;title&#39;: &#39;Lover&#39;, &#39;artist&#39;: &#39;Taylor Swift&#39;, &#39;year&#39;: 2019, &#39;genre&#39;: [&#39;Pop&#39;, &#39;Synth-pop&#39;], &#39;tracks&#39;: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;}, &#39;producer&#39;: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;]} . for k,v in lover_album.items(): # iterate using a for loop for key and value print(str(k) + &quot;: &quot; + str(v)) # Write your own code to print tracks in readable format # tracks = lover_album[&quot;tracks&quot;] # print(&quot;Tracks:&quot;) # for track in tracks: # print(&quot;- &quot; + track) . title: Lover artist: Taylor Swift year: 2019 genre: [&#39;Pop&#39;, &#39;Synth-pop&#39;] tracks: {1: &#39;I Forgot That You Existed&#39;, 2: &#39;Cruel Summer&#39;, 3: &#39;Lover&#39;, 4: &#39;The Man&#39;, 5: &#39;The Archer&#39;, 6: &#39;I Think He Knows&#39;, 7: &#39;Miss Americana &amp; The Heartbreak Prince&#39;, 8: &#39;Paper Rings&#39;, 9: &#39;Cornelia Street&#39;, 10: &#39;Death By A Thousand Cuts&#39;, 11: &#39;London Boy&#39;, 12: &#34;Soon You&#39;ll Get Better (feat. Dixie Chicks)&#34;, 13: &#39;False God&#39;, 14: &#39;You Need To Calm Down&#39;, 15: &#39;Afterglow&#39;, 16: &#39;Me! (feat. Brendon Urie of Panic! At The Disco)&#39;, 17: &#34;It&#39;s Nice To Have A Friend&#34;, 18: &#39;Daylight&#39;, 19: &#39;All Of The Girls You Loved Before&#39;} producer: [&#39;Taylor Swift&#39;, &#39;Jack Antonoff&#39;, &#39;Joel Little&#39;, &#39;Taylor Swift&#39;, &#39;Louis Bell&#39;, &#39;Frank Dukes&#39;] . def search(): search = input(&quot;What would you like to know about the album?&quot;) if lover_album.get(search.lower()) == None: print(&quot;Invalid Search&quot;) else: print(lover_album.get(search.lower())) search() # This is a very basic code segment, how can you improve upon this code? # add an error handling . Invalid Search . Hacks . Answer ALL questions in the code segments | Create a diagram or comparison illustration (Canva). What are the pro and cons of using this data structure? | Dictionary vs List | . | Expand upon the code given to you, possible improvements in comments | Build your own album showing features of a python dictionary | . . album = { &quot;title&quot;: &quot;Isolation&quot;, &quot;artist&quot;: &quot;Kali Uchis&quot;, &quot;year&quot;: 2018, &quot;genre&quot;: [&quot;R&amp;B&quot;, &quot;Soul&quot;, &quot;Pop&quot;], &quot;tracks&quot;: [ { &quot;title&quot;: &quot;Body Language (Intro)&quot;, &quot;length&quot;: &quot;1:05&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Miami (feat. BIA)&quot;, &quot;length&quot;: &quot;4:06&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;, &quot;BIA&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Just a Stranger (feat. Steve Lacy)&quot;, &quot;length&quot;: &quot;3:58&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;, &quot;Steve Lacy&quot;], &quot;producers&quot;: [&quot;Steve Lacy&quot;] }, { &quot;title&quot;: &quot;Flight 22&quot;, &quot;length&quot;: &quot;3:36&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Romil Hemnani&quot;, &quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Your Teeth in My Neck&quot;, &quot;length&quot;: &quot;3:07&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Tyrant (feat. Jorja Smith)&quot;, &quot;length&quot;: &quot;3:24&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;, &quot;Jorja Smith&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Dead to Me&quot;, &quot;length&quot;: &quot;3:17&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Nuestro Planeta (feat. Reykon)&quot;, &quot;length&quot;: &quot;3:23&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;, &quot;Reykon&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;In My Dreams&quot;, &quot;length&quot;: &quot;3:21&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Romil Hemnani&quot;, &quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Gotta Get Up (Interlude)&quot;, &quot;length&quot;: &quot;0:45&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Tomorrow&quot;, &quot;length&quot;: &quot;3:36&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Romil Hemnani&quot;, &quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;Coming Home (Interlude)&quot;, &quot;length&quot;: &quot;0:47&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;], &quot;producers&quot;: [&quot;Kali Uchis&quot;] }, { &quot;title&quot;: &quot;After the Storm (feat. Tyler, The Creator &amp; Bootsy Collins)&quot;, &quot;length&quot;: &quot;3:27&quot;, &quot;writers&quot;: [&quot;Kali Uchis&quot;, &quot;Tyler, The Creator&quot;], &quot;producers&quot;: [&quot;BadBadNotGood&quot;] } ] } .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/03/29/DS-hashmaps.html",
            "relUrl": "/week%2027/2023/03/29/DS-hashmaps.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "4.3 Video Examples",
            "content": "the answer is 50 seconds because that is the time it takes for the process that runs the longest running one after another would take longer (70 seconds), but running parallel would only take 45 seconds . numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] even_numbers = [num for num in numbers if num % 2 == 0] print(even_numbers) . [2, 4, 6, 8, 10] .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/03/29/4.3VideoExample.html",
            "relUrl": "/week%2027/2023/03/29/4.3VideoExample.html",
            "date": " • Mar 29, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "STEM at CSUSM",
            "content": "Notes: Cal State San Marcos . one of the few CSUs with physics | she failed a few calc classes, but she kept persevering &quot;failures don&#39;t define you&quot; | . | good support system at CSUSM | John started at palomar, physics, and computer science | took six years to get his bachelors degree | computer science is a very versatile degree | can&#39;t run away from computer science | CSUSM has a lot of new science/stem buildings | easy to get internships from local companies | many stem pathways chem | physics | computer engineering | mathematics | electrical engineering | biochemistry | software engineering | . | a lot of STEM based clubs a lot of these clubs give students a lot of opportunities | . | how to get internships network with people | check e-mails | join clubs | go to campus events | avoid unpaid internships | ask faculty members for help on applications or essays | . | programs summer scholars program paid | provides students with research experience | . | . | cs can collaborate with chem make virtual reality labs | . | grant: gov funded money | scholarship: privately funded(you have to find them yourself) | a semester is $3,000 at CSUSM | apply for FASA ASAP | masters degree is usually 2 years | . Reflect: I find this panel to be very inspiring because the stress of college applications and decisions has been getting to me recently. I have also been feeling pressured to get into prestigious colleges like UCs because I feel like that is the only way I will get good opportunities and a good job in the future. However, this panel proved me wrong. They offers so many courses and programs, as well as clubs and other resources that I feel like could really help me have a good college experience and get me a job I enjoy. Ashley, one of the speakers, also said some inspiring things, like how failure is normal and doesn&#39;t define you. Lastly, the activity at the end was very fun. .",
            "url": "https://clairechen3.github.io/clairerepos/week%2027/2023/03/28/CSUSM.html",
            "relUrl": "/week%2027/2023/03/28/CSUSM.html",
            "date": " • Mar 28, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Imperative Programming for Databases",
            "content": "&quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) data = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = data app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() #SQLAlchemy object called here # This belongs in place where it runs once per project db.init_app(app) # app object called here . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class Symptom(db.Model): # -- class User defining the template for users, used to create Objects # -- db.Model is inheritance. Allows class Uers to use database attributes and methods. __tablename__ = &#39;symptoms&#39; # table name is plural, class name is singular __table_args__ = {&#39;extend_existing&#39;: True} # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=True, nullable=False) _ucomment = db.Column(db.String(255), unique=True, nullable=False) _usymptom = db.Column(db.String(255), unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, ucomment, usymptom): # -- &quot;constructor&quot;. init method allows us to initialize an object from our User class self._name = name # variables with self prefix become part of the object, self._ucomment = ucomment self._usymptom = usymptom # a name getter method, extracts name from object, allows properties to be accessed like attributes of the object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def ucomment(self): return self._ucomment # a setter function, allows name to be updated after initial object creation @ucomment.setter def ucomment(self, ucomment): self._ucomment = ucomment # check if uid parameter matches user id in object, return boolean def is_name(self, name): return self._name == name @property def usymptom(self): return self._usymptom # a setter function, allows name to be updated after initial object creation @usymptom.setter def usymptom(self, usymptom): self._usymptom = usymptom def __str__(self): return json.dumps(self.read()) def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;comment&quot;: self.ucomment, &quot;symptom&quot;: self.usymptom, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, ucomment=&quot;&quot;, usymptom=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(ucomment) &gt; 0: self.ucomment = ucomment if len(usymptom) &gt; 0: self.usymptom = usymptom db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initSymptoms(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() # this line creates the tables in the database, to allow data to be added &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = Symptom(name=&#39;Annika Liao&#39;, ucomment=&#39;tylenol&#39;, usymptom=&#39;cramps&#39;) u2 = Symptom(name=&#39;Claire Chen&#39;, ucomment=&#39;tea&#39;, usymptom=&#39;headaches&#39;) u3 = Symptom(name=&#39;Claire Zhao&#39;, ucomment=&#39;heating pad&#39;, usymptom=&#39;cramps&#39;) u4 = Symptom(name=&#39;Grace Wang&#39;, ucomment=&#39;magnesium&#39;, usymptom=&#39;muscle aches&#39;) u5 = Symptom(name=&#39;Emma Shen&#39;, ucomment=&#39;vitamin d&#39;, usymptom=&#39;acne&#39;) # user object is user in database. It takes the 4 arguments of name, uid, password, and dob. symptoms = [u1, u2, u3, u4, u5] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for symptom in symptoms: try: &#39;&#39;&#39;add comment to table&#39;&#39;&#39; object = symptom.create() print(f&quot;Created new uid {object.name}&quot;) # try block is creation of user in database. If successful,this message will print. except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {symptom.name}, or error.&quot;) #if try block fails, except block is executed, and this message will print. initSymptoms() . Records exist uid Annika Liao, or error. Records exist uid Claire Chen, or error. Records exist uid Claire Zhao, or error. Records exist uid Grace Wang, or error. Records exist uid Emma Shen, or error. . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;periods&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() # metadata for database . def find_by_name(name): with app.app_context(): user = Symptom.query.filter_by(_name=name).first() # this method constructs a query that retrieves all users in the database where _uid matches their uid return user # returns user object . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM symptoms&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Annika Liao&#39;, &#39;tylenol&#39;, &#39;cramps&#39;) (2, &#39;Claire Chen&#39;, &#39;tea&#39;, &#39;headaches&#39;) (3, &#39;Grace Wang&#39;, &#39;magnesium&#39;, &#39;muscle aches&#39;) (4, &#39;Emma Shen&#39;, &#39;vitamin d&#39;, &#39;acne&#39;) (5, &#39;&#39;, &#39;&#39;, &#39;&#39;) (6, &#39;lora&#39;, &#39;aspirin&#39;, &#39;ifhewowh&#39;) . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) ucomment = input(&quot;Enter your comment:&quot;) usymptom = input(&quot;Enter the symptom you&#39;re addressing&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO symptoms (_name, _ucomment, _usymptom) VALUES (?, ?, ?)&quot;, (name, ucomment, usymptom)) # Commit the changes to the database conn.commit() print(f&quot;A new record {name} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . import sqlite3 def update(): name = input(&quot;Enter your name to update records&quot;) user = find_by_name(name) if user is None: print(f&quot;No user found with name {name}&quot;) return print(&quot;Current user information:&quot;) print(user.read()) ucomment = input(&quot;Enter comment&quot;) if ucomment: user.ucomment = ucomment # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE symptoms SET _ucomment = ? WHERE _name = ?&quot;, (ucomment, name)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No name {name} was found in the table&quot;) else: print(f&quot;The row with name {name} has been updated, comment changed to {ucomment}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . import sqlite3 def delete(): name = input(&quot;Enter name to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM symptoms WHERE _name = ?&quot;, (name,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;Name {name} was not found in the table&quot;) else: # The uid was found in the ta&#39;ble and the row was deleted print(f&quot;The record of name {name} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . (1, &#39;Annika Liao&#39;, &#39;tylenol&#39;, &#39;cramps&#39;) (2, &#39;Claire Chen&#39;, &#39;tea&#39;, &#39;headaches&#39;) (3, &#39;Grace Wang&#39;, &#39;magnesium&#39;, &#39;muscle aches&#39;) (4, &#39;Emma Shen&#39;, &#39;vitamin d&#39;, &#39;acne&#39;) (5, &#39;&#39;, &#39;&#39;, &#39;&#39;) (6, &#39;lora&#39;, &#39;aspirin&#39;, &#39;ifhewowh&#39;) Current user information: {&#39;id&#39;: 6, &#39;name&#39;: &#39;lora&#39;, &#39;comment&#39;: &#39;aspirin&#39;, &#39;symptom&#39;: &#39;ifhewowh&#39;} The row with name lora has been updated, comment changed to sudafed (1, &#39;Annika Liao&#39;, &#39;tylenol&#39;, &#39;cramps&#39;) (2, &#39;Claire Chen&#39;, &#39;tea&#39;, &#39;headaches&#39;) (3, &#39;Grace Wang&#39;, &#39;magnesium&#39;, &#39;muscle aches&#39;) (4, &#39;Emma Shen&#39;, &#39;vitamin d&#39;, &#39;acne&#39;) (5, &#39;&#39;, &#39;&#39;, &#39;&#39;) (6, &#39;lora&#39;, &#39;sudafed&#39;, &#39;ifhewowh&#39;) The record of name lora was successfully deleted (1, &#39;Annika Liao&#39;, &#39;tylenol&#39;, &#39;cramps&#39;) (2, &#39;Claire Chen&#39;, &#39;tea&#39;, &#39;headaches&#39;) (3, &#39;Grace Wang&#39;, &#39;magnesium&#39;, &#39;muscle aches&#39;) (4, &#39;Emma Shen&#39;, &#39;vitamin d&#39;, &#39;acne&#39;) (5, &#39;&#39;, &#39;&#39;, &#39;&#39;) The record of name was successfully deleted .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/24/Database2.4b.html",
            "relUrl": "/week%2025/2023/03/24/Database2.4b.html",
            "date": " • Mar 24, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Big Idea 2 Corrections",
            "content": ". Using 7 bits will allow for up to 128 sequences because 27=128. Therefore, a minimum of 7 bits are needed. . . The desired information cannot be determined with these two spreadsheets because students with grade point averages of 3.5 or less cannot be identified. So it has to be I and II because it has stuff about GPA and sport of each student . . The images are the data collected and no metadata would be required. so it would be D . . B evaluates to true only for restaurants with the correct price range (when prcRange equals &quot;lo&quot; or &quot;med&quot;) and the correct customer rating (when avgRating ≥ 4.0) which is the correct answer .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/19/BigIdea2Corrections.html",
            "relUrl": "/week%2025/2023/03/19/BigIdea2Corrections.html",
            "date": " • Mar 19, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? outlines the structure of a database that defines how the data is organized and how it can be accessed. . What is the purpose of identity Column in SQL database? it provide a unique identifier for each row in the table, which can be useful for referencing and manipulating the data. | What is the purpose of a primary key in SQL database? ensure that each row of data in a table is unique and can be referenced and manipulated reliably | What are the Data Types in SQL table? define the type of data that can be stored in a column of a table, like text, integers, float, boolean, and dates | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;users&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_name&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_dob&#39;, &#39;DATE&#39;, 0, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? a connection object is an object that represents a connection to a database. The connection object is used to interact with the database by creating a cursor object. sqlite3.connect(database) . | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? there are functions and variables in the objects . | Is &quot;results&quot; an object? How do you know? it is an object because it has variables and functions and it is shown in the debugger | schema is the metadata for the database | column is typically the schema and the rows are the actual data | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&#39;SELECT * FROM users&#39;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (1, &#39;Thomas Edison&#39;, &#39;toby&#39;, &#39;sha256$STxDLySL47dkB0Te$bebcfaac497af31e342eb07d3f61f6b85e3684411854c870fee1579aed1d7768&#39;, &#39;1847-02-11&#39;) (2, &#39;Nikola Tesla&#39;, &#39;niko&#39;, &#39;sha256$nWjfG9B33bgpr67N$f2f6449c2af41320d52ec685408c7ed1f01aaa49084b22c14ca6e799a88b8520&#39;, &#39;2023-03-15&#39;) (3, &#39;Alexander Graham Bell&#39;, &#39;lex&#39;, &#39;sha256$XOCPplMt0SUhn7s8$8e2b100130ba80e77d8346d90643b7a34561c082821b4eb77c4972b71e7b79f2&#39;, &#39;2023-03-15&#39;) (4, &#39;Eli Whitney&#39;, &#39;whit&#39;, &#39;sha256$kNqBsDgXZfUqCiV6$c1db722f87ce417ad97193494c22cc91fc733baa35b7d251cd31404cbbb37bc5&#39;, &#39;2023-03-15&#39;) (6, &#39;Marion Ravenwood&#39;, &#39;raven&#39;, &#39;sha256$u4L4T4hjKKmPJjXk$8c8dfe3b1a6c7defa611e7116807eff3670d191a2d6613af0cb4f4d19bed3f95&#39;, &#39;1921-10-21&#39;) (7, &#39;Indiana Jones&#39;, &#39;indi&#39;, &#39;sha256$DEfOKfoAxvl35utA$4815579dcb3ab88e721d3dd85202fa8ee5fd457835c39b2c8b2209516ac1cf5b&#39;, &#39;1920-10-21&#39;) (8, &#39;Claire&#39;, &#39;Chen&#39;, &#39;ClaireChen&#39;, &#39;0000-00-00&#39;) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations? in 2.4a, the function uses SQLite database to take in the data that the user inputs to create the users. This is better for simple projects. in 2.4b, the function uses SQLAlchemy to create the new users. This is better for more complex projects. | Explain purpose of SQL INSERT. Is this the same as User init? it adds new data to an existing table or creates a new table with initial data. It allows for the creation and modification of databases. | . import sqlite3 def create(): name = input(&quot;Enter your name:&quot;) uid = input(&quot;Enter your user id:&quot;) password = input(&quot;Enter your password&quot;) dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_name, _uid, _password, _dob) VALUES (?, ?, ?, ?)&quot;, (name, uid, password, dob)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? it checks if the password is less than 2 characters | Explain try/except, when would except occur? when there is an error updating | What code seems to be repeated in each of these examples to point, why is it repeated? the try/except is repeated in each of the examples | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;hacked&quot; password = &#39;gothackednewpassword123&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? it can be because once it is deleted from the database, it can no longer be retrieved. | In the print statemements, what is the &quot;f&quot; and what does {uid} do? the f in the code will replace with {uid} with the value of the uid variable. | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? so you can choose which function you want to execute | Could you refactor this menu? Make it work with a List? yes, you can make a list of all the functions set that as operation | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . A new user record claire has been created The row with uid indi was successfully deleted The row with uid claire was successfully deleted The row with uid Chen was successfully deleted . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/week%2025/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? | . Flask app object | SQLAlchemy object | &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; # SQLAlchemy object db = SQLAlchemy() # This belongs in place where it runs once per project #Flask app object db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class | class User purpose | db.Model inheritance | init method | @property, @.setter&lt;/li&gt; additional methods | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): # -- defining the template for users, used to create objects, users assign attributes into these templates, class is a template for future object # -- inherit the capability to make the class use the database properties, methods, attributes __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # -- adding to the template database information # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): # -- 123qwerty is the default if new data is not given # --the innit method is called &quot;the constructor&quot;, it is used to instantiate (make, create) an object from our user class self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # the crud is the additional methods that are use in a class to create read update and delete # output content using str(object) in human readable form, uses getter # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None # setter used to add data to object # getter (property) used to retrieve data from an object . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? | . Create All Tables from db Object | User Object Constructors | Try / Except | &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() # this is using the create function to add all users to the database &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; &quot;&quot;&quot;these attributes make the u1 object&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: # tests for errors try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) #handles the errors except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) # this constructs the users and adds them to the object initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following | . User.query.filter_by | user.password | def find_by_uid(uid): with app.app_context(): # it looks for the uid of a specific user user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False # verifying if the password is the right password from that user if (user.is_password(password)): return True return False # check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following | . user.find_by_uid() and try/except | user = User(...) | user.dob and try/except | user.create() and try/except | def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) # finds the uid and checks it it exists in database user = find_by_uid(uid) # if it does exist, it will print the existing one try: print(&quot;Found n&quot;, user.read()) return # if it doesn&#39;t exist it will keep executing the following code except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date # it calls the stuff in the user object user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: # it creates/ adds this new user to the database object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following | . User.query.all | json_ready assignment | # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): # it gets all the data from the database table = User.query.all() # creates a list of JSON strings to store in database. json_ready = [user.read() for user in table] # each user adds user.read() to list return json_ready # read() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Add Update functionality to this blog. | Add Delete functionality to this blog. | . def delete(): # get uid of user to delete uid = input(&quot;Enter the uid of the user you want to delete: &quot;) user = find_by_uid(uid) # check if user exists if user is None: print(f&quot;No user found with uid {uid}&quot;) return # delete user from database with app.app_context(): try: user.delete() print(f&quot;User {uid} deleted&quot;) except: print(&quot;Unknown error occurred during deletion&quot;) delete() . User deleted . def update(): # get uid of user to update uid = input(&quot;Enter the uid of the user you want to update: &quot;) user = find_by_uid(uid) # check if user exists if user is None: print(f&quot;No user found with uid {uid}&quot;) return # print current user information print(&quot;Current user information:&quot;) print(user.read()) # request updated information name = input(&quot;Enter updated name (press enter to keep current value): &quot;) if name: user.name = name password = input(&quot;Enter updated password (press enter to keep current value): &quot;) if password: user.password = password dob = input(&quot;Enter updated date of birth (YYYY-MM-DD) (press enter to keep current value): &quot;) if dob: try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: print(f&quot;Invalid date {dob} require YYYY-mm-dd, date not updated&quot;) # update user in database with app.app_context(): try: user.update() print(f&quot;User {uid} updated&quot;) print(user.read()) except: print(&quot;Unknown error occurred during update&quot;) update() . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation . &lt;/div&gt; | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/week%2025/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . basically a table (think sqlite) dark grey (metadata) light grey (data) . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=False)) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 123 3.57 246 4.00 578 2.78 469 3.45 324 4.75 313 3.33 145 2.95 167 3.90 235 3.15 nil 2.80 469 3.45 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df[df.GPA &gt; 3.00]) . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Fambulous. | . When choosing a data set, think about the following:- Does it have a good sample size? - Is there bias in the data? - Does the data set need to be cleaned? - What is the purpose of the data set? - ... . Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. Here are some suggestions:- Titanic Dataset: This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. . Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset:- Kaggle: The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. . UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . from sklearn.datasets import load_iris iris = load_iris() # Print the feature names print(&quot;Feature names:&quot;, iris.feature_names) # Print the target names print(&quot;Target names:&quot;, iris.target_names) # Print the first 5 rows of the data print(&quot;Data: n&quot;, iris.data[:5]) # Print the target values for the first 5 rows print(&quot;Target: n&quot;, iris.target[:5]) # Find average petal length petal_length_avg = iris.data[:, 2].mean() print(&quot;Average petal length:&quot;, petal_length_avg) # Find the average petal width petal_width_avg = iris.data[:, 3].mean() print(&quot;Average petal width:&quot;, petal_width_avg) # Find the index of the longest petal longest_petal_idx = iris.data[:, 2].argmax() # Find the length of the longest petal longest_petal_length = iris.data[longest_petal_idx, 2] print(&quot;Longest petal length:&quot;, longest_petal_length) # Find the index of the shortest petal shortest_petal_idx = iris.data[:, 2].argmin() # Find the length of the shortest petal shortest_petal_length = iris.data[shortest_petal_idx, 2] print(&quot;Shortest petal length:&quot;, shortest_petal_length) . Feature names: [&#39;sepal length (cm)&#39;, &#39;sepal width (cm)&#39;, &#39;petal length (cm)&#39;, &#39;petal width (cm)&#39;] Target names: [&#39;setosa&#39; &#39;versicolor&#39; &#39;virginica&#39;] Data: [[5.1 3.5 1.4 0.2] [4.9 3. 1.4 0.2] [4.7 3.2 1.3 0.2] [4.6 3.1 1.5 0.2] [5. 3.6 1.4 0.2]] Target: [0 0 0 0 0] Average petal length: 3.7580000000000005 Average petal width: 1.1993333333333336 Longest petal length: 6.9 Shortest petal length: 1.0 . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) print(titanic_data.columns) # titanic data set print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns . Titanic Data Index([&#39;survived&#39;, &#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;fare&#39;, &#39;embarked&#39;, &#39;class&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;deck&#39;, &#39;embark_town&#39;, &#39;alive&#39;, &#39;alone&#39;], dtype=&#39;object&#39;) survived pclass sex age sibsp parch class fare 0 0 3 male 22.0 1 0 Third 7.2500 1 1 1 female 38.0 1 0 First 71.2833 2 1 3 female 26.0 0 0 Third 7.9250 3 1 1 female 35.0 1 0 First 53.1000 4 0 3 male 35.0 0 0 Third 8.0500 .. ... ... ... ... ... ... ... ... 886 0 2 male 27.0 0 0 Second 13.0000 887 1 1 female 19.0 0 0 First 30.0000 888 0 3 female NaN 1 2 Third 23.4500 889 1 1 male 26.0 0 0 First 30.0000 890 0 3 male 32.0 0 0 Third 7.7500 embark_town 0 Southampton 1 Cherbourg 2 Southampton 3 Southampton 4 Southampton .. ... 886 Southampton 887 Southampton 888 Southampton 889 Cherbourg 890 Queenstown [891 rows x 9 columns] . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(td) . survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 705 0 2 1 39.0 0 0 26.0000 1 0.0 706 1 2 0 45.0 0 0 13.5000 1 0.0 707 1 1 1 42.0 0 0 26.2875 1 0.0 708 1 1 0 22.0 0 0 151.5500 1 0.0 710 1 1 0 24.0 0 0 49.5042 1 1.0 embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 705 0.0 1.0 706 0.0 1.0 707 1.0 0.0 708 0.0 1.0 710 0.0 0.0 [564 rows x 11 columns] . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning . From Tutorials Point%20is,a%20consistence%20interface%20in%20Python). Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python.&gt; Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. Decision Trees, prediction by a piecewise constant approximation. - Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7470588235294118 LogisticRegression Accuracy: 0.788235294117647 . /home/claire/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( . .",
            "url": "https://clairechen3.github.io/clairerepos/2023/03/09/AP-unit2-3.html",
            "relUrl": "/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? ls, cd, rm-rf . | What are the command you use in Windows terminal to access files? dir, rmdir, mkdir&lt;/p&gt; &lt;/li&gt; What are some of the major differences? the differences between windows and linux the dir command vs the ls, they both list &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? you have to identify which file the image is in. It is especially important when you want to edit the image&lt;/p&gt; &lt;/li&gt; How does the meta data source and label relate to Unit 5 topics? metadata is the information embeded in a image file. and the labeling is used to assign descriptive tags to certain files to help identify and classify them&lt;/p&gt; &lt;/li&gt; Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? IPython is a command shell for interactive computing that is now known as jupyter notebook. It is interesting for pandas and images because it helps us to express the metadata from the images into a datastructure(table) so that we can analyze or change it. . | &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;volcano.jpg&quot;}, {&#39;source&#39;: &quot;Claire Chen&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? Base64 represents the most characters as it represents letters, numbers, and some symbols. Binary only does 0 or 1 and hexadecimals only 16 digits (0-9-A-F)&lt;/p&gt; &lt;/blockquote&gt; Translate first 3 letters of your name to Base64. The Base64 encoding of &quot;cla&quot; is &quot;Y2xh&quot;.&lt;/li&gt; &lt;/ul&gt; numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? when logging into synergy, it buffers during the sign in | From your consumer experience, what effects have you experienced from buffering? it is kind of annoying because you have to wait for it to load to do whatever it is you&#39;re trying to do | How do these effects apply to images? these affects apply to images because when loading images the buffer depends on how big the file is. Usually lossy files take a shorter time to load because it is compressed which makes the file smaller. | . &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? yes&lt;/li&gt; &lt;/ul&gt; &lt;/blockquote&gt; Describe Grey Scale algorithm in English or Pseudo code? It converts a color image into a grayscale by taking the average of the red, green, and blue values of each pixel in the color image and setting the resulting value as the new gray value for that pixel.&lt;/p&gt; &lt;/li&gt; Describe scale image? What is before and after on pixels in three images? Scaling an image is when you resize it by a certain factor horizontaly and/or vertically . The scale factor has to be greater than 1 to make the image bigger, but less than 1 to shrink the image. &lt;/p&gt; &lt;/li&gt; Is scale image a type of compression? If so, line it up with College Board terms described? scaling an image is not a type of compression because although it reduces the size of the image itself, it doesn&#39;t reduce the amount of data in that image or reduce the actual file size. &lt;/p&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;volcano.jpg&quot;}, {&#39;source&#39;: &quot;Claire Chen&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smiley Face Claire Chen PNG RGBA Original size: (1200, 1200) Scaled size: (320, 320) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;volcano.jpg&quot;}, {&#39;source&#39;: &quot;Claire Chen&quot;, &#39;label&#39;: &quot;Smiley Face&quot;, &#39;file&#39;: &quot;smiley.png&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Green Square Internet green.png PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- scaled image -- . grey image . - meta data -- Clouds Impression Peter Carolin clouds.png PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- scaled image -- . grey image - meta data -- Lassen Volcano Peter Carolin volcano.jpg JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- scaled image -- . grey image . - meta data -- Smiley Face Claire Chen smiley.png PNG RGBA Original size: (1200, 1200) Scaled size: (320, 320) -- scaled image -- . grey image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | . Lossless: image is fully restored even when you change the size ex. a logo that is shown in multiple parts of the a page in different sizes . Lossy: techniques that reduce file size by discarding the less important information ex. sending image files (email, dm) it might ask you what size you want the image to be. If you were to use lossless for sending files it might take a long time to send because the file might be too big. . import numpy as np from PIL import Image # Load the image image = Image.open(&#39;images/smiley.png&#39;) # Add a title to the image image.info[&#39;Title&#39;] = &#39;Redscaled&#39; # Convert the image to a NumPy array img_array = np.asarray(image) # Convert the array to binary representation binary_pixels = np.unpackbits(img_array, axis=-1) # Convert the binary representation to hexadecimal hex_pixels = np.apply_along_axis(lambda x: hex(int(&#39;&#39;.join(map(str, x)), 2))[2:].zfill(2), -1, binary_pixels) # Display the binary and hexadecimal pixels print(&quot;Binary pixels: n&quot;, binary_pixels) print(&quot;Hexadecimal pixels: n&quot;, hex_pixels) # Create a copy of the array red_img = np.copy(img_array) # Set the green and blue channels to 0, leaving only the red channel red_img[:, :, 1] = 0 red_img[:, :, 2] = 0 # Convert the NumPy array back to an image red_image = Image.fromarray(red_img) # Save the red-scale image red_image.save(&#39;images/smiley.png&#39;) # Resize the image to half its original size resized_image = red_image.resize((red_image.width // 2, red_image.height // 2)) print(image.info) # Show the resized image resized_image.show() . Binary pixels: [[[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]] [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]] [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]] ... [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]] [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]] [[0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] ... [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0] [0 0 0 ... 0 0 0]]] Hexadecimal pixels{&#39;Title&#39;: &#39;Redscaled Smiley&#39;} . &lt;/div&gt; . | . | . | . | . | . | . | . | . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/07/AP-unit2-2.html",
            "relUrl": "/week%2025/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "Tri 2 Final MCQ Reflection",
            "content": "I got a 50/50 on my MCQ but here are some things I should practice and review before the AP exam . binary search | boolean expressions (NOT, or, and) | substring | question 24 (index) | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2025/2023/03/06/Tri2FinalMCQ.html",
            "relUrl": "/week%2025/2023/03/06/Tri2FinalMCQ.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Technical Achievements",
            "content": "Personally, I progressed more in my frontend coding skills with learning how to debug, add style, and make functions, but I also learned and struggled a lot about backend coding and how classes/objects are used to store things in a database as well as things like methods and innerHTML . Create (post) . def post(self): &#39;&#39;&#39; Read data for json body &#39;&#39;&#39; body = request.get_json() &#39;&#39;&#39; Avoid garbage in, error checking &#39;&#39;&#39; # validate comment (makes sure it is more than two characters) comment = body.get(&#39;comment&#39;) if comment is None or len(comment) &lt; 2: return {&#39;message&#39;: f&#39;Comment is missing, or is less than 2 characters&#39;}, 400 # validate symptom (makes sure it is more than two characters) symptom = body.get(&#39;symptom&#39;) if symptom is None or len(symptom) &lt; 2: return {&#39;message&#39;: f&#39;Symptom is missing, or is less than 2 characters&#39;}, 400 &#39;&#39;&#39; #1: Key code block, setup USER OBJECT &#39;&#39;&#39; uo = Symptom(comment=comment, symptom=symptom) &#39;&#39;&#39; #2: Key Code block to add user to database &#39;&#39;&#39; # create comment in database user = uo.create() # success returns json of comment if user: return jsonify(user.read()) # failure returns error return {&#39;message&#39;: f&#39;Processed {comment}, either a format error or {symptom} is duplicate&#39;}, 400 . I used selection to test the conditions of the comment and symptom(inputs) to make sure there is no garbage going in like repetitions and comments or symptoms that are less than to characters. I used the things we learned from class like if then statements, len(), return, condition. The second chunk of code is adding the comment to the database which can then be accessed from frontend. . // URL for Create API // Fetch API call to the database to create a new comment fetch(create_fetch, requestOptions) .then(response =&gt; { // trap error response from Web API if (response.status !== 200) { const errorMsg = &#39;Database create error: &#39; + response.status; console.log(errorMsg); const tr = document.createElement(&quot;tr&quot;); const td = document.createElement(&quot;td&quot;); td.innerHTML = errorMsg; tr.appendChild(td); resultContainer.appendChild(tr); return; } // response contains valid result response.json().then(data =&gt; { console.log(data); //add a table row for the new/created userid //add_row(data); }) }) . In frontend, I fetched the API from the backend and added the data in the database to the table in the frontend as rows. . Create (get) . class _Read(Resource): def get(self): users = Symptom.query.all() # read/extract all comments from database json_ready = [user.read() for user in users] # prepare output in json return jsonify(json_ready) # jsonify creates Flask response object, more specific to APIs than json.dumps . This backend code gets the data from the database through &quot;query&quot; and outputs it in json through &quot;jsonify&quot; . // Display User Table, data is fetched from Backend Database function read_users() { // prepare fetch options const read_options = { method: &#39;GET&#39;, // *GET, POST, PUT, DELETE, etc. mode: &#39;cors&#39;, // no-cors, *cors, same-origin cache: &#39;default&#39;, // *default, no-cache, reload, force-cache, only-if-cached credentials: &#39;omit&#39;, // include, *same-origin, omit headers: { &#39;Content-Type&#39;: &#39;application/json&#39; } } . Now in fronted I use the get method to fetch the data. Now frontend and backend are connected through POST and GET! . Reflection: . Though challenging, I do realize that backend coding is arguably one of the most crucial parts of building a website and my experience with backend coding and the skills I am just starting to learn will get better and more applicable as I continue to code in the future. .",
            "url": "https://clairechen3.github.io/clairerepos/week%2024/2023/02/27/Technical_Achieve.html",
            "relUrl": "/week%2024/2023/02/27/Technical_Achieve.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "Review Guide",
            "content": "Row 1: . Video: . input | program functionality | Output | . Written: . describes the overall purpose of the program. | describes what functionality of the program is demonstrated in the video. | describes the input and output of the program demonstrated in the video. | . My Response: . This program’s purpose is to help women find remedies to their period symptoms and build a community where women can share what remedies work for them and help others | This program’s function is to provide a comment section where people can input the symptom they are addressing as well as the remedy for that symptom and check off the symptoms they experience in the checkbox to find remedies and products that can help | In the video, the user imputed the symptom they were addressing, cramps, and a remedy that worked for them which was tylenol. When the user clicked ‘post’ and ‘see all comments’, their comment was there even when the page was refreshed, the user’s comment was also saved into the database. The input was the symptom she imputed which was cramp, as well as the comment she imputed, which was tylenol, and the output was the same thing but displayed in the comments table. The comment is then stored in the database as a list | . Row 2: . one code segment that shows the data in this same list being used as part of fulfilling the program’s purpose. | one code segment that identifies the name of the variable representing the list being used in this response. | describes what the data contained in this list is representing in the program. | . My Response: The data contained in ‘myObj’ is the symptom and comment that is being added into the comment section to give other people advice on helping ease their period symptoms . function addData(){ if(document.getElementById(&quot;symptoms&quot;).value&amp;&amp;document.getElementById(&quot;comment-box&quot;).value){ myObj = { &quot;symptom&quot;:document.getElementById(&quot;symptoms&quot;).value, &quot;comment&quot;:document.getElementById(&quot;comment-box&quot;).value}; //alert(document.getElementById(&quot;symptoms&quot;).value); //alert(document.getElementById(&quot;comment-box&quot;).value); add_row(myObj); } } . Row 3: . includes a program code segment that shows a list being used to manage complexity in the program. | explains how the named, selected list manages complexity in the program code by explaining why the program code could not be written, or how it would be written differently, without using this list. | . My Response: . This list &#39;myObj&#39; manages complexity and the program code could not be written without it because getting the value of the symptom and the comment is needed to save them both in to the database. You could write two separate functions to add symptom and comment into a database, but it wouldn&#39;t be as concise, might lead to more errors in the code, and the inputs might not be stored together in the database which could also be confusing. | . function addData(){ if(document.getElementById(&quot;symptoms&quot;).value&amp;&amp;document.getElementById(&quot;comment-box&quot;).value){ myObj = { &quot;symptom&quot;:document.getElementById(&quot;symptoms&quot;).value, &quot;comment&quot;:document.getElementById(&quot;comment-box&quot;).value}; //alert(document.getElementById(&quot;symptoms&quot;).value); //alert(document.getElementById(&quot;comment-box&quot;).value); add_row(myObj); } } . Row 4: . a code segment showing a student-developed procedure with at least one parameter that has an effect on the functionality of the procedure. | one code segment showing where the student-developed procedure is being called. | describes what the identified procedure does and how it contributes to the overall functionality of the program. | . My Response: . The first function &quot;fHide&quot; hides all the hyperlinks when you first click on the page by using a for loop to go through all the hyperlinks and changing their visibility to hidden. . | Then the second function &quot;fDisplay&quot; also uses a for loop that goes through the checklist and looks for the ones that are checked. If it is checked, then it will change the visibility from hidden to not hidden, but if it is not checked, it will remain hidden. . | . // this function hides all the links at first fHide(1, 11); function fHide(startIndex, endIndex) { for (var i = startIndex; i &lt;= endIndex; i++) { document.getElementById(&quot;s&quot; + i).style.visibility = &quot;hidden&quot;; } } // when this function is called, it will display the remedies to the symptoms that have been checked function fDisplay(startIndex, endIndex, checkboxPrefix) { for (var i = startIndex; i &lt;= endIndex; i++) { var checkboxId = checkboxPrefix + i; var element = document.getElementById(&quot;s&quot; + i); if (document.getElementById(checkboxId).checked) { element.style.visibility = &quot;&quot;; } else { element.style.visibility = &quot;hidden&quot;; } } } . Row 5: . includes a program code segment of a student developed algorithm that includes sequencing, selection, and iteration | explains in detailed steps how the identified algorithm works in enough detail that someone else could recreate it. | . . My Response: . For my function ‘fDisplay’, I used a for loop(iteration) and set the variable i to 1 and added one to i each time it ran until i reached 12. This results in the function checking all 11 of the symptoms in my checkbox and checking them for a certain condition. I then used an if statement(selection) to check if the checkboxes were checked off or not. If the condition of it being checked came out to be true, then the visibility of the corresponding hyperlink to that symptom would become visible. If not, the corresponding hyperlink to that symptom would remain hidden. | . // when this function is called, it will display the remedies to the symptoms that have been checked function fDisplay(startIndex, endIndex, checkboxPrefix) { for (var i = startIndex; i &lt;= endIndex; i++) { var checkboxId = checkboxPrefix + i; var element = document.getElementById(&quot;s&quot; + i); if (document.getElementById(checkboxId).checked) { element.style.visibility = &quot;&quot;; } else { element.style.visibility = &quot;hidden&quot;; } } } . Row 6: . describes two calls to the selected procedure identified in written response. Each call must pass a different argument(s) that causes a different segment of code in the algorithm to execute. | describes the condition(s) being tested by each call to the procedure. | identifies the result of each call. | . . My Response: . fHide is called at the beginning of the code so that right as you click on the page all the hyperlinks start off being invisible. The result of this call is the hyperlinks becoming invisible . | fDisplay is called when you press the ‘See Remedies to Button’ so it gives you the link to the remedy of your symptom(s) after you submit your checklist. The conditions being tested in this call is whether or not the checkbox is checked. The result is it outputting the hyperlinks to the remedies to the corresponding symptoms that have been checked off . | . &lt;button type=&quot;button&quot; id=rem onclick =&quot;fDisplay(1, 11, &#39;chk&#39;)&quot; style = &quot;color: white&quot;&gt;&lt;font color=&quot;darkred&quot;&gt; See Remedies To:&lt;/font&gt;&lt;/button&gt; . lists: database, json, api .",
            "url": "https://clairechen3.github.io/clairerepos/week%2024/2023/02/27/Review_Guide.html",
            "relUrl": "/week%2024/2023/02/27/Review_Guide.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Personal Achievements",
            "content": "Main Achievements . writing functions (using sequencing, selection, and iteration) | learning how to debug (using alerts) | implementing better coding habits (not pasting random code, commenting, paying attention to details) | . One of my personal Achievements when working on Flow with my group was learning how to debug my code and getting a lot of practice on writing functions(especially iterations). For one of the features in my Symptom tab, I made a checklist that gives you the link to the part of the page that shows the remedies to the symptoms you&#39;ve checked off in the checklist after pressing the &quot;See Remedies To&quot; button. See function below . // this function hides all the links at first fHide(); function fHide() { for (var i =1; i &lt;12;i++){ document.getElementById(&quot;s&quot;+ i).style.visibility = &quot;hidden&quot;; } } // when this function is called, it will display the remedies to the symptoms that have been checked function fDisplay() { for (var i =1; i &lt;12;i++) if (document.getElementById(&quot;chk&quot;+ i).checked==true){ document.getElementById(&quot;s&quot;+ i).style.visibility = &quot;&quot;; } else{ document.getElementById(&quot;s&quot;+ i).style.visibility = &quot;hidden&quot;; } } . The first function &quot;fHide&quot; hides all the hyperlinks when you first click on the page by using a for loop to go through all the hyperlinks and changing their visibility to hidden. Then the second function &quot;fDisplay&quot; also uses a for loop that goes through the checklist and looks for the ones that are checked. If it is checked, then it will change the visibility from hidden to not hidden, but if it is not checked, it will remain hidden. Though this may not seem really advanced, for me, writing a function from scratch and using sequencing, selection, and iteration to accomplish my goals is already a pretty big improvement. However, I hope to continue to improve my coding skills and be able to write more concise code. . Another way I grew from this project was learning how to debug through alerts and ultimately just creating better coding habits. I have learned not to just paste random segments of code that I find on the internet and hope it does what I want it to do. Instead, I analyze what the code I find is doing and try to replicate it to fit my own needs. And if it doesn&#39;t work, I can use alerts in my code to see what part of my code or what functions are actually running and what aren&#39;t so I know where something might have gone wrong and what I have to fix. I have also been trying to pay more attention to simple things like the indentations in my code and adding comments which can actually make a big difference when showing my code to others and it also helps me when I am looking through my code trying to debug. .",
            "url": "https://clairechen3.github.io/clairerepos/week%2024/2023/02/27/Personal_Achieve.html",
            "relUrl": "/week%2024/2023/02/27/Personal_Achieve.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post21": {
            "title": "2023 Night at the Museum Blog",
            "content": "first me and my group set up our website and presented to some parents as well as other students, not only showing them what our website is about, but also asking them questions about how we can improve our websites interface. We let them use our symptoms feature which gave them remedies and products for your symptoms and also let them take a quiz to test their knowledge on periods. Then we walked around and looked at other groups websites. One of the websites that caught my attention was bria&#39;s friend website because the user interface was really pretty and comfortable to use and also I have never thought of making a social website that you can connect with people on (kind of like social media) and I thought it was a really good idea. Claire Zhao and I also went to see the digital animation exhibits which were all really cool and looked pretty realistic. Claire is posing with one of the donuts in this picture but the ones I loved the most were the interior design and house ones. Something like that could definitely be useful to designing an actually home or any place. lastly, we walked down to the ceramics class to see some cool pieces and sculptures that students have made. My favorite one was this turtle because I really liked how detailed it is and also the colors and how their blended. I also like how it is also a teapot because you can use it as a teapot but also as a decoration when you&#39;re not using it as a teapot. . Overall, night at the museum started a little stressful, but in the end, things ended up going pretty well, and it was really fun to see what other students from other classes have been working on .",
            "url": "https://clairechen3.github.io/clairerepos/week%2024/2023/02/27/NATMBlog.html",
            "relUrl": "/week%2024/2023/02/27/NATMBlog.html",
            "date": " • Feb 27, 2023"
        }
        
    
  
    
        ,"post22": {
            "title": "College Board 5.5 and 5.6",
            "content": "5.5 . When you create a GitHub repository it requests a license type. Review the license types in relationship to this Tech Talk and make some notes in your personal blog. Open Source: MIT: allows you to code freely and distribute closed source versions. Credit for MIT licensing is adding the authors name in comments GPL: allows you to code freely,but can&#39;t distribute closed source versions. . | In your blog, summarize the discussions and personal analysis on Software Licenses/Options, Digital Rights, and other Legal and Ethical thoughts from this College Board topic. A software License helps distribute software, some with copyright protection, and some without. Digital rights help protect the content that is being distributed online, like movies and music Legal and Ethically: accepting terms and conditions, not copyrighting music, not pirating movies or images. . | . Make a license for your personal (blog) and Team repositories for the CPT project. Be sure to have a license for both Team GitHub repositories (frontend/backend). Document license(s) you picked and why. FYI, frontend, since it is built on GitHub pages may come with a license and restrictions. Document in blog how team made license choice and process of update. | . 5.6 . Describe PII you have seen on project in CompSci Principles. the private and public key, maybe a login feature . | What are your feelings about PII and your personal exposure? I think PII&#39;s are necessary and can enhance user experience, but it is best to keep your information as safe as possible by not giving random websites or people information like you location or financial information. . | Describe good and bad passwords? What is another step that is used to assist in authentication. A good password is one that only you know that is unique and doesn&#39;t really have a relation to anything (random). Another step that is used to assist identification is username and maybe even email. . | Try to describe Symmetric and Asymmetric encryption. Symmetric encryption is encryption where only one key (a secret key) is used to both encrypt and decrypt electronic information Asymmetric cryptography is a process that uses a pair of related keys – one public key and one private key – to encrypt and decrypt a message and protect it from unauthorized access or use. . | Provide an example of encryption we used in AWS deployment. port numbers . | Describe a phishing scheme you have learned about the hard way. Describe some other phishing techniques. sending you a message that you won some type of lottery or contest and giving you a link to go to to retrieve the reward, when it is just trying to steal your information. . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2022/2023/02/08/CB5.55.6.html",
            "relUrl": "/week%2022/2023/02/08/CB5.55.6.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post23": {
            "title": "College Board 5.3 and 5.4",
            "content": "5.3 hacks . Intentional or Purposeful bias . Google “What age groups use Facebook” vs “… TikTok”? What does the data say? Is there purposeful exclusion in these platforms? Is it harmful? Should it be corrected? Is it good business? My Ideas: Facebook has an older audience, and Tiktok has a younger audience. Facebook&#39;s audience is typically 25-34 years old while Tiktok&#39;s audience is 13-17 years old. There&#39;s no purposeful exclusion because the apps don&#39;t exclude anyone, but people of different ages and generations choose to use certain apps. It is not harmful because anyone can have access to have either apps, so there&#39;s no need to correct it. However, this can be good for business because certain apps with a younger audience can target certain Other Student&#39;s Ideas: Tiktok targets the younger generation&#39;s shortened attention span. Facebook is an older social media platform, so it would make sense that older generations use it more. . | Why do virtual assistants have female voices? Amazon, Alexa Google, Apple Siri. Was this purposeful? Is it harmful? Should it be corrected? Is it good business? My Ideas: Virtual assistants have female voices because women are seen as gentler figures and society has given women the role of helping others. Furthermore, female voices tend to articulate vowel sounds more clearly. It is not harmful because it research shows that women&#39;s voices are typically more clear so it would be better for the users so it doesn&#39;t need to be corrected. . | Talk about an algorithm that influences your decisions, think about these companies (ie FAANG - Facebook, Amazon, Apple,Netflix, Google) My Ideas: Algorithms that influence your decisions like facebook are typically good for business because it advertises and shows you things that you would like or want according to past searches or things you&#39;ve interacted with to interact with, and therefore makes you spend more time on their website or app. However this can also lead to things that can be misleading. . | . HP Computers are Racist . Come up with some thoughts on the video and be ready to discuss them as I call on you. Here are some ideas… . Does the owner of the computer think this was intentional? If yes or no, justify you conclusion. The owner does think that the computer was intentionally not tracking his face because it is &quot;racist&quot; | How do you think this happened? because the company didn&#39;t test their feature on black people. | Is this harmful? Was it intended to be harmful or exclude? probably not, it was likely just not tested on enough black people. | Should it be corrected? yes, it should be corrected because this feature should be available to anyone that buys the computer. | What would you or should you do to produce a better outcome? maybe make the camera more sensitive to faces with lower contrast. | . 5.4 Hacks . CompSci has 150 ish principles students. Describe a crowdsource idea and how you might initiate it in our environment? Students can use slack to get other people&#39;s insights on your issues. . | What about Del Norte crowdsourcing? Could your project be better with crowdsourcing? we can add a user input for users to add remedies that work for them personally that might help others with the same symptoms. (kinda like a Q and A) . | What kind of data could you capture at N@tM to make evening interesting? Perhaps use this data to impress Teachers during finals week. we could collect people&#39;s suggestions on remedies to symptoms and even information on periods in general if we run into anyone that might know more than we do about periods and women&#39;s health. . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2021/2023/02/01/CB5.3.html",
            "relUrl": "/week%2021/2023/02/01/CB5.3.html",
            "date": " • Feb 1, 2023"
        }
        
    
  
    
        ,"post24": {
            "title": "Notes on Rebecca and Aadya's Project Outline",
            "content": "mentioned both purpose and audience (bigger picture) | their website applies to us (Del Norte students) | includes their goal/function and their progress on it so far | CRUD (create, remove, update, delete) | uses lists in backend to save user data | sign up AND login page for new and existing users | we can add a user input for reviews, and other women&#39;s input or motivation | add some ways men can help, contribute to this | Model, View, Control: submit data and send to backend, info will then be saved and stored and only admin can edit, new files will be saved. | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2020/2023/01/28/RebeccaNotes.html",
            "relUrl": "/week%2020/2023/01/28/RebeccaNotes.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post25": {
            "title": "Individual Project Blog",
            "content": "Each individual performs starts &quot;pre-view&quot; outline/write-up of materials required for College Board. Describe portion of Project you will use for Create Performance task Describe code plan as it is required for CB, Consider what will be demonstrated in video, aka video plan . I will probably use the user sign in for my create performance task as it uses lists and shows a connection between the frontend and backend. I plan to show the input and output of the symptoms checklist and describe the purpose and the function like I did in this weeks presentation. I will show data storage through a list in the backend. This data will then be used to predict symptoms for each day of the user&#39;s period or cycle. Show and describe the function I made for the symptoms checklist and where is is called. Explain how the checklist function uses sequencing, selection, and iteration. Describe the conditions that the function is testing and the result of that. visuals included for video . show usage of the symptoms checklist (input and output) | show how it updates the user input list | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2020/2023/01/28/IndividualProjectBlog.html",
            "relUrl": "/week%2020/2023/01/28/IndividualProjectBlog.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post26": {
            "title": "5.1 5.2 Blog",
            "content": "Individual: 5.1, 5.2 Blog . Think of three beneficial effects of your projects based on 5.1 Unit . Women can track their periods by simply putting in the date of their last period | People can learn more about period symptoms and how to relieve them | People can get motivational quotes when they feel down or are experiencing PMS | . Think of a potential harmful effect of your project. . our project does not have many harmful affects, but it isn&#39;t that applicable to men Answer with an opinion and learnings so far this year: . | What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . | . pros: . - only appropriate content will be accessed by students . cons: . - some websites needed for school might be blocked . What concerns do you have personally about the digital divide? For yourself or for others some countries that don&#39;t have that much access to as much technology might fall behind economically because they don&#39;t have the resources they need to progress. | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2020/2023/01/24/Week20Blog.html",
            "relUrl": "/week%2020/2023/01/24/Week20Blog.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post27": {
            "title": "College Board MCQ 2 Corrections",
            "content": "Q5 . The answer is B because you have to set the temporary variable to one of the values before you switch the values . Q10 . The answer is B and C because since it just has to be greater than or equal to, it just can&#39;t be less then. . Q16 . The answer is C because it needs a selection to test the condition if the number is an integer and is an even number . Q39 . The answer is C because on the 2nd step, the robot needs to turn right 3 times to go left .",
            "url": "https://clairechen3.github.io/clairerepos/week%2020/2023/01/24/MCQ2Corrections.html",
            "relUrl": "/week%2020/2023/01/24/MCQ2Corrections.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post28": {
            "title": "College Board 5.1",
            "content": "Chat GPT(AI) only gives you one point of view, but google gives you many. | AI&#39;s have the risk of being computer biased ex. when face recognition was first created, it only worked on light-skin people | . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2019/2023/01/24/CB51.html",
            "relUrl": "/week%2019/2023/01/24/CB51.html",
            "date": " • Jan 24, 2023"
        }
        
    
  
    
        ,"post29": {
            "title": "College Board Grading 3",
            "content": "Review the score given by the AP scorers and reflect: . on any discrepancies in your scoring versus the ap scoring There aren&#39;t many differences between my grading and the college board grading, but here are some things I&#39;ve noticed and picked up on in their grading. . | They like very detailed descriptions, especially when describing the algorithm that you make. . | both lists made have to contribute to program and show that it manages complexity . | on what your program will need to fulfill all requirements . have a user input and output when running | have a clear and detailed description of the function (what the program is doing) | have a clear and detailed description of the purpose (the general goal/ why you made the program) | have two lists that help manage complexity and store data have detailed descriptions of these lists and how they manage complexity | have a function that can be called multiple times and describe what that function is doing to help the program function | the function should include all the components of an algorithm | have a detailed description of the algorithm (step by step what it is doing) | describe the calls and the conditions it is testing | show result of the call | . | on the criteria and why a submission may have failed to meet the standard The 1st submission didn&#39;t meet the standard for the 1st row because there was no description of the overall function of the program and they mixed up the input and the output and didn&#39;t explain them . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2019/2023/01/22/CBGrading3.html",
            "relUrl": "/week%2019/2023/01/22/CBGrading3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post30": {
            "title": "College Board Grading 2",
            "content": "Review the score given by the AP scorers and reflect: . on any discrepancies in your scoring versus the ap scoring My scores this time are definitely more like the college board scoring as I am getting more familiar with what the rubric is really looking for, but i still got a little confused on some small things, for example, what managing complexity through a list really looks like. | . on what your program will need to fulfill all requirements . have a user input | have an out put | preferably have something that shows the process of how the input resulted in the output | have a clear and detailed description of the function (what the program is doing) | have a clear and detailed description of the purpose (the general goal/ why you made the program) | describe the input that was inputed in the demonstration video and what happens to it in order to get the output | use lists that help manage complexity | have a function that can be called multiple times. | the function should include all the components of an algorithm | . | on the criteria and why a submission may have failed to meet the standard The forth submission didn&#39;t meet the standard for the third row because although they did have two lists, one of the lists wasn&#39;t really contributing anything to the functionality of the program and, therefore, didn&#39;t count . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2018/2023/01/15/CBGrading2.html",
            "relUrl": "/week%2018/2023/01/15/CBGrading2.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post31": {
            "title": "Object-Oriented Programming",
            "content": "Notes . Object-Oriented Programming (OOP) uses classes as a blueprint for creating an Object which is then used like many other Python variables | Classes collect data, functions and procedures | An object is a part of a class and there can be many objects from one class each object also collects its own data | . | @ decorators: allow access to instance data without the use of functions | @property decorator (aka getter): enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter): enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | All instance data (self._name, self.email ...) are prefixed with &quot;&quot; | . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf #CLASS OF @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class_of&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, class_of={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&quot;1915&quot;) print(u1) u2 = User(name=&quot;Claire Chen&quot;, uid=&quot;clu&quot;, password=&quot;123clu&quot;, dob=date(2006,8,19), classOf=&quot;2024&quot;) print(u2) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class_of&#34;: &#34;1915&#34;} {&#34;name&#34;: &#34;Claire Chen&#34;, &#34;uid&#34;: &#34;clu&#34;, &#34;dob&#34;: &#34;08-19-2006&#34;, &#34;age&#34;: 16, &#34;class_of&#34;: &#34;2024&#34;} . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class Login: def __init__(self, name, uid, password, phone, email): self._name = name # variables with self prefix become part of the object, self._uid = uid self._phone = phone self.set_password(password) self._email = email #CLASS OF @property def email(self): return self._email @email.setter def email(self, email): self._email = email @property def phone(self): return self._phone @phone.setter def phone(self, phone): self._phone = phone @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;phone&quot;: self.phone, &quot;email&quot;: self.email } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},phone={self._phone}, class_of={self._email})&#39; u1 = Login(name=&quot;Claire Chen&quot;, uid=&quot;clu&quot;, password=&quot;123clu&quot;, phone=&quot;000.000.0000&quot;, email=&quot;clairechengmail@gmail.com&quot;) print(u1) ###### For reference to see raw form ################ # print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) # print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) # print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Claire Chen&#34;, &#34;uid&#34;: &#34;clu&#34;, &#34;phone&#34;: &#34;000.000.0000&#34;, &#34;email&#34;: &#34;clairechengmail@gmail.com&#34;} .",
            "url": "https://clairechen3.github.io/clairerepos/week%2015/2023/01/10/Hack.html",
            "relUrl": "/week%2015/2023/01/10/Hack.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post32": {
            "title": "3.5-3.7 Hacks",
            "content": "Hack 1 . Logical Operators . not Shows/does the opposite of the data | mostly used for true false | ex. if you assign red to false, and then you have a variablle called result that you assign the value not(red) to, then it will output true | code example: | . | . isRed = False green = not(isRed) print(green) . and evaluates two conditions together and if both conditions are met and only if both conditions are met, will the final result be shown | ex. if flower = red and flower = green print(&quot;christmas flower&quot;) the flower has to be both red and green for the algorithm to print chirstmas flower, if only red, christmas flower will not be printed | code example: | . | . flower = 50 if flower &gt;= 1 and flower &lt;= 100: print(&quot;bouquet&quot;) if flower &gt;= 100: print(&quot;garden&quot;) . or only one of the two conditons has to be met | ex. if temp &gt;=100 or temp &lt;= 20 print (&quot;stay home&quot;) | code example: | . | . temp = 101 if temp &gt;= 100 or temp &lt;= 20: print(&quot;stay home&quot;) . Hack 2 . Conditionals . evaluates actions in the program (true or false) . Selection: the result of this block of a selection depends on if a condition is true or false Algorithm: instructions/steps to accomplish a certain task, or solve a different problem Conditional Statement: executes certain statements depending on if it is true or false . Binary Conditional Logic . print(&quot;please enter a number&quot;) x = int(input()) if x % 2 == 0: # if x is divisible by 2 with no remainder print(x, &quot;is even&quot;) else: # if x is not divisible by 2 with no remainder print(x, &quot;is odd&quot;) . Nested statement 1 . print(&quot;are you happy?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;no&quot;: print(&quot;why be sad when you can be glad&quot;) if reply == &quot;yes&quot;: print(&quot;good for you&quot;) . Nested Statement 2 . print(&quot;what holiday do you celebrate?&quot;) reply = input(&quot;Christmas or Hanukkah&quot;) if reply == &quot;Hanukkah&quot;: print(&quot;Happy hanukkah!&quot;) elif reply == &quot;Christmas&quot;: print(&quot;Merry Chirstmas!&quot;) else: print(&quot;Happy Holidays!&quot;) . Nested Statement 3 . print(&quot;are you a swiftie?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;yes&quot;: print(&quot;slay!&quot;) else: print(&quot;oh.&quot;) . display 4 statements . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) . Stem or no stem? . print(&quot;are you interested in stem?&quot;) reply1 = input(&quot;yes or no&quot;) if reply1 == &quot;yes&quot;: list1 = [&quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;AP Statistics&quot;] print(&quot;you should take&quot;, list1) else: list2 = [&quot;AP Human Geography&quot;, &quot;AP World&quot;, &quot;AP English Language&quot;] print(&quot;you should take&quot;, list2) .",
            "url": "https://clairechen3.github.io/clairerepos/hacks57",
            "relUrl": "/hacks57",
            "date": " • Jan 8, 2023"
        }
        
    
  
    
        ,"post33": {
            "title": "College Board Grading",
            "content": "Review the score given by the AP scorers and reflect: . on any discrepancies in your scoring versus the ap scoring For the fist row of the first submission, I got confused with the purpose and function so I checked it off on the checklist, but then I realized what the difference between purpose and function and noticed that the student did not have the purpose and probably got confused like I did. Other than that, my grading was pretty much the same as the college board ones. | . on what your program will need to fulfill all requirements . have a user input | have an out put | preferably have something that shows the process of how the input resulted in the output | have a clear and detailed description of the function (what the program is doing) | have a clear and detailed description of the purpose (the general goal/ why you made the program) | describe the input that was inputed in the demonstration video and what happens to it in order to get the output | use lists that help manage complexity | have a function that can be called multiple times. | the function should include all the components of an algorithm | . | on the criteria and why a submission may have failed to meet the standard The first submission didn&#39;t meet the standard because their descriptions for everything could&#39;ve been a lot more detailed and they were missing purpose of their project. Also, their list didn&#39;t help to manage the complexity of the program . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2015/2023/01/05/CBGrading.html",
            "relUrl": "/week%2015/2023/01/05/CBGrading.html",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post34": {
            "title": "Unit 3 Notes",
            "content": "1-2 . Variables . Variables are containers that hold a certain value/ data | there are different datatypes that a variable can store string (text/ letters) | int (number) | boolean (true false) | . | to assign a value to a variable, you use an assignment operator which is (=) -&gt; in pseudocode | . | variables should align with the data that it stores | . name = &quot;claire&quot; # can print just the variable instead of the whole name print(c) # this datatype is string so you need &quot;&quot; . claire . a = 1 # ints don&#39;t need &quot;&quot; print(a) . 1 . Answer = True print(a) . True . Strings and Lists . strings can be a series of words or numbers (including phone numbers) | lists store a series of variables, words, or numbers | syntax: square brakets | easier than assigning variable to each value | . name1 = &quot;claire&quot; name2 = &quot;claire&quot; name3 = &quot;grace&quot; name4 = &quot;annika&quot; print(name1, name2, name3, name4) # yes names = [&quot;claire&quot;, &quot;claire&quot;, &quot;grace&quot;, &quot;annika&quot;] print(names) . claire claire grace annika [&#39;claire&#39;, &#39;claire&#39;, &#39;grace&#39;, &#39;annika&#39;] . 3-4 . Algorithms . set of instructions to do certain tasks | parts of an algorithm sequence (order) | selection (decision dependant on condition) | iteration (loop until condition is met) | . | . Sequence . step 1 | step 2 | step 3 ##### Selection | if this is right, then do this | otherwise, do that ##### Iteration | repeat this step until you get this | . Arithmetic Operators . add | subtract | multiply | divide | mod (remainder) | . Answer = 1 + 1 print(Answer) . 2 . Answer = 1 - 1 print(Answer) . 0 . Answer = 1 * 1 print(Answer) . 1 . Answer = 1 / 1 print(Answer) . 1.0 . Answer = 1 % 1 print(Answer) # 1/1 has no remainder . 0 . Strings . len (string) | concat (str1, str2) | substring (str1, str2, length) | . len(&quot;claire&quot;) # print the number of letters . 6 . string = &quot;ClaireChen&quot; print(string[2:6]) # prints 2nd to 6th letter . aire . 5-7 . Boolean (true false) | rational operators equal to | greater than | less than | . | logical operators not (opposite) | and (if both apply) | or (if either apply) | . | . isRaining = False # if it is not raining result = not(isRaining) # the result is the opposite of raining (is not raining) print(result) . True . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;passed&quot;) . passed . flower = &quot;red&quot; if flower == &quot;red&quot; or &quot;green&quot;: print(&quot;red or green flower&quot;) # either red or green . red or green flower . Conditionals . if | then | else if/ elif | this is selection | . flower = 3 if flower == 1: print(&quot;flower&quot;) elif flower &gt;= 1: print(&quot;bouquet&quot;) . bouquet . Nested Conditionals . conditionals within conditionals | . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) # first conditional if reply1 == &quot;yes&quot;: # within the condition yes, you can enter your fav character print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) # if you enter Emily, it prints yay, othewise it prints oh if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) # from the first yes or no conditional, if you dont say yes, it prints you should else: print(&quot;you should&quot;) . Have you watched criminal minds? Who&#39;s your favorite character yay . 8-10 . Iteration: repeats a specified number of times or until a given condition is met . | Iteration Statements: repeats zero or more times, until a stopping condition is met . | Traversing Lists: all elements in the list are accessed (can be partial or complete) | . i = 0 # starting from 0, if from one it would print 4 times while (i &lt; 5): # print repeat 5 times print(&quot;repeat&quot;) i = i + 1 . repeat repeat repeat repeat repeat . for i in range(1,11): # start from 1 up until 11, kind of like intervals in math print(i) . 1 2 3 4 5 6 7 8 9 10 . difference between for and while loops . for loop is used when the number of iterations is known while loop is repeated until the statement in the program is proved wrong . list recap . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | . 12-13 . Procedures: basically same as function | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | . x = 5 y = 3 # kind of states the variables being used in the function def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . how to call a function . nameFunction(parameters) | . num = 5 # the function math is being called # the parameter is x def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . the return statemnt . A return statement ends the execution of a function, and returns control to the calling function | . # called function named divide # parameters are num1 and num2 def divide(num1,num2): x = num1/num2 return x . Vocab . Modularity - breaking a complex program into smaller, independent parts (modules) that can be used and reused in different parts of the program | Abstraction - hiding the details of how a particular code or system works and exposing only the essential features or functions (make it look clean) | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency (bad) | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . # this function squares numbers to avoid duplicates def square(a): return a * a # this function returns the square root of the sum of the two squared legs to find the hypotenuse def hypotenuse_abstracted(leg1, leg2): leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) . 14-15 . Libraries . A library has functions that can later be accessed in new programs | A library is a collection of code from another source that can be used to add functionality to a program save time and effort in the development process | &quot; .&quot; tells the program to look for the library and use its code | . | . import math x = int(input()) math.sqrt(x) . 3.0 . Random . randomly generates a number between a set of two given numbers | have to import the library random | . import random answer1 = random.randint(0,3) print(answer1) . 1 . random has a lot of different methods like . - seed() | Initialize the random number generator - getstate() | Returns the current internal state of the random number generator - setstate() | Restores the internal state of the random number generator - getrandbits() | Returns a number representing the random bits - randrange() | Returns a random number between the given range - randint() | Returns a random number between the given range . 16 . Simmulation . def: a virtual experiment or an immitation of a process | ex. testing the safety of a car or a game | . Experiment . a process done to make a discovery, test a hypothesis, or demonstrate a known fact | . simulations can be safer, cheaper, and more efficient, but also less accurate | simulations aren&#39;t always the same | . 17-18 . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . Iteration . The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. .",
            "url": "https://clairechen3.github.io/clairerepos/Notes3",
            "relUrl": "/Notes3",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "3.17-3.18 Hacks",
            "content": "Hack 1 . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(int(i)) else: i = (i / 2) list_.append(int(i)) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39; + &quot; n&quot;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;Sequence: &#39;) print(*l, sep=&quot; &quot;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Hack 2 . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . a = 1 b = 2 c = 3 print(a) print(b) print(c) . 1 2 3 . a = [1, 2, 3] print(a) . [1, 2, 3] . this one is more efficient because it uses a list instead of three seperate variables with three values . tasks = [&quot;have a snack&quot;, &quot;homework&quot;, &quot;gym&quot;, &quot;eat&quot;, &quot;shower&quot;, &quot;sleep&quot;] # use of list for efficiency def complete_tasks(tasks): for task in tasks: if task == &quot;have a sanck&quot;: print(&quot;slay&quot;) elif task == &quot;homework&quot;: print(&quot;do not disturb&quot;) elif task == &quot;gym&quot;: print(&quot;do not distub&quot;) elif task == &quot;eat&quot;: print(&quot;slay&quot;) elif task == &quot;shower&quot;: print(&quot;good job&quot;) elif task == &quot;sleep&quot;: print(&quot;do not disturb&quot;) complete_tasks(tasks) . do not disturb do not distub slay good job do not disturb .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/14/317-318.html",
            "relUrl": "/unit%203%20lessons/2022/12/14/317-318.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Panel Notes Extra Credit",
            "content": "Kathyleen Beveridge . born in vietnam, moved to bay area, went to Santa Clara University, studied abroad in Spain, moved to San Diego | started in financial banking and moved to hightech investment, retirment planning | . | places she&#39;s worked at hugo packard | qualcomm | HP | Thermofisher Scientific common goal to improve the world using tech | . | financial banking is 1 on 1, can only help one person at a time | However, high tech can change billions of people at one point qualcomm&#39;s chips were used by half the world | . | senior director of marketing and global sales. does this probduct make sense for this market | commercialize product to bring to the market | worked with scrum masters to commercialize their tech products | bring to the market and make an impact on this world | engineers and programmers turn ideas into reality and marketing helps commercialize and bring | . | . Kris Porter . DevOps engineer doesn&#39;t code all day | . | Enjoyed stem in highschool | went to UCLA | his first CS class was in University and failed it | but he still had a tech career later on | he worked on the networked infomechanical systems | learned linux operating system fixed computers installed routers | works on deploy softwares on to internet (DevOps) prevent hacking | protect emails (spam) | worked on server | autimation, data analytics | . | worked on streaming media infrastructure (olympics) | works at twitter home timeline | . | continuous learning CCNA training | machine learning | python | . | . More Notes . agile methodology different companies have their own method of agile | good skillset to have | some things | . | when companies shuffle, start looking for a new job:) | data scientist join fragnant data bases | predict where customer demand is | ex. predict harvest for wine companies | . | most important skill in tech industry continuous learning | learning how to learn (programming language) | each company has a diffeent way of doing things (be adaptive) | dont be too concerned about things you see on the news | you can still get in to a tech career with a non-tech backgroung | listen to requirements and translates it into how technology solves the requirements | speak tech terms in normal terms | . | biggest challenge in tech and how to overcome be adaptive to big changes | interview (series of timed random tests) | . | coding teaches you a way of thinking critical thinking | disecting a problem | problem solving and walking people through your process clearly | . | . Reflection . I am interested in doing something in the business marketing field, similar to Kathyleen and I thought it was really nice how she was able to use her high tech background to help her get to such a high position in marketing. I also really like how Kris shared his experience with failing coding and not really taking any coding classes in college, but still being able to work hard and get into the tech field .",
            "url": "https://clairechen3.github.io/clairerepos/2022/12/13/PanelNotes.html",
            "relUrl": "/2022/12/13/PanelNotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "3.16 Hacks",
            "content": "Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . A simulation that allows people to try on clothes based on their clothing size and body measurements virtually when online shopping . What makes it a simulation? . - people don&#39;t have to go through the pain of going in stores and trying on clothes to see if it fits them, instead, they can just go online, put in their measurements and the simulation will tell you if you will fit the piece of clothing . What are it&#8217;s advantages and disadvantages? . - you don&#39;t have to leave your house to by clothes that fit! . In your opinion, would an experiment be better in this situation? . - It honestly depends on the person, but for me personally, I would prefer a simulation because shopping and trying on clothes in store stresses and grosses me out so for people like me, a clothing try on simulation could be very helpful . Hack #2 . Screenshot for quiz score: . Hack #3 . Describe the rolling dice simulation (answer guiding questions) how this simulation works is by asking for how many die you want to roll first and then giving you a random output from 1 through 6. The purpose of this game is to simulate rolling as many die as you want! I you wanted to roll 50 die, it might be a little hard to find that many die, so a simulation would be better | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 10.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 10) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-10] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [8, 7, 4, 8, 5, 10, 7, 10, 3] . Extra Credit . simulating picking petals off of flowers, good it you don&#39;t have a flower on hand:) . numPetals = int(input(&quot;number of petals&quot;)) while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;he loves me&quot;) if numPetals % 2 == 1: print(&quot;he loves me not&quot;) . 9 he loves me not 8 he loves me 7 he loves me not 6 he loves me 5 he loves me not 4 he loves me 3 he loves me not 2 he loves me 1 he loves me not 0 No More Petals he loves me .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/13/316.html",
            "relUrl": "/unit%203%20lessons/2022/12/13/316.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "3.14-3.15 Hacks",
            "content": "Hack 1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . import math # math is a library x = int(input()) # set input which is a number as the value of x math.sqrt(x) # take the square root of x . 4.0 . Hack 2 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) . Tails . import math math.sqrt(81) . 9.0 . an import random function generates a random number from a given range (kind of like an interval in calc) . some other things we can import are math to do math calculations (ex. square root) and also numpy to do calculus (ex. derivatives) . Hack 3 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . import random spin = random.randint(1,8) if spin &gt;=3: print(&quot;green&quot;) elif spin == 4 or 5: print(&quot;blue&quot;) elif spin == 6: print(&quot;purple&quot;) elif spin == 7: print(&quot;red&quot;) elif spin == 8: print(&quot;orange&quot;) . green . What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? any number from 12 to 20 including 12 and 20 any number that is less than 12 and greater than 20 is excluded .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/12/314-315.html",
            "relUrl": "/unit%203%20lessons/2022/12/12/314-315.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "3.8-3.10 Hacks",
            "content": "Hack 1 . Iteration: Part of an Algorithm that repeats itself until a certain condition is met . Start | the number of petals on a flower is 8 | pick off one petal, and number of petals goes down by one | How many petals are left? | repeat step three until number of petals is zero | Finish | numPetals = 8 while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;I am smart&quot;) if numPetals % 2 == 1: print(&quot;I am dumb&quot;) . 7 I am dumb 6 I am smart 5 I am dumb 4 I am smart 3 I am dumb 2 I am smart 1 I am dumb 0 No More Petals I am smart . Iteration Statement: loop repeats zero or more times, until disturbed (loop is stopped) . i=3 while i&lt;=81: print(i) i=i+13 . 3 16 29 42 55 68 81 . Hack 2 . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;] for i in colors: if i == &quot;green&quot;: break print(i) # it will stop printing after yellow, prints until green . red orange yellow . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] least = min(nums) # minimum print(min(nums)) # print minimum for i in nums: # loop to check if there are any smaller numbers if i &lt; (min(nums)): #if there are any numbers that are even smaller than the one before, it will print the new one, but there isn&#39;t. print(i) . 38 . Reference sheet notes (4) . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | .",
            "url": "https://clairechen3.github.io/clairerepos/hacks810",
            "relUrl": "/hacks810",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Unit 3 Vocab",
            "content": "Unit 2&#8230; Binary/Data Terms . Bits, Bytes, Hexadecimal / Nibbles binary digit that is the smallest increment of data on a computer ex. 0 and 1 | . | a byte is 8 bits ex. 12,345,678 | . | Hexadecimal is a base/positional number system used in mathematics and computer science (base 16 numbering system) | . | a nibble is 4 bits | . | Binary Numbers: Unsigned Integer, Signed Integer, Floating Point a binary digit, or bit, is the smallest unit of data unsigned: integers that don&#39;t have a sign associated with them ex. 1, 2 | . | signed: A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647] -100, 80 | . | Floating point: a positive or negative whole number with a decimal point ex. 5.5 | . | . | . | Binary Data Abstractions: Boolean, ASCII, Unicode, RGB Boolean: datatype that does true or false | ASCII: a character encoding scheme in which each character is represented by a 7-bit (originally) or 8-bit binary sequence | . | Unicode: 16-bit character set which describes all of the keyboard characters more than ASCII | ex. emojis | . | RGB: a problem solving approach (algorithm) to find a satisfactory solution where finding an optimal or exact solution is impractical or impossible example. | . | . | . . Data Compression: Lossy, Lossless Lossy: data encoding and compression technique that deliberately discards some data in the compression process | Lossless: data compression algorithm that allows the original data to be perfectly reconstructed from the compressed data | . | . x = True y = False . Unit 3&#8230; Algorithm/Programming Terms . Variables, Data Types, Assignment Operators . Variables: a value that can change, depending on conditions or on information passed to the program | Data Types: String (or str or text) - combination of any characters | Character (or char) - single letters | Integer (or int) - whole numbers | Float (or Real) - numbers that contain decimal points, or for fractions. | Boolean (or bool) - data is restricted to True/False or yes/no options | . | Assignment Operators: operator used to assign a new value to a variable ex. =, +=, -= | . | . | Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class . Lists: an abstract data type that represents a finite number of ordered values, where the same value may occur more than once. | 2D lists: a two-dimensional array can hold more than one set of data | Dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | Class: written in a defined structure to create an object. | . | Algorithms, Sequence, Selection, Iteration . Algorithms: a list set of instructions, used to solve problems or perform tasks. Sequence: algorithms do tasks in the order of specification. | Selection: helps choose two different outcomes based off a decision. | Iteration: if a condition is true, then the code can repeat. | . | . | Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans - - - Expressions and Iteration, Truth Tables . Expressions: combination of values and functions that are combined and interpreted to create a new value. x + y Addition | x - y Subtraction | x * y Multiplication | x / y Division x // y Quotient | . | x % y Remainder | x ** y Exponentiation | . | Comparison Operators: compares two values against one another. a = b equal to | a &gt; b greater than | a &lt; b less than | a &gt;= b greater than or equal to | a &lt;= b less than or equal to | a != b not equal to | . | Boolean Expressions: if a condition is true or false, there is a differnet outcome and if a condition is true, the code repeats an earlier step | Truth Table: have two values 0 = off, false | 1 = on, true | Examples 0 and 0 = false. And operator means both needs to be true. | 0 or 1 = true. Either or. | Use this in conditionals (selection) | XOR = exclusive or. | Or = similar to true or false ex. A is true, B is false | . | . | . | . | . | Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings . Characters: display unit of information equivalent to one alphabetic letter or symbol ex. a, 8, # | . | Strings: ordered sequences of characters | Length: the number of symbols output. | Concatenation: String concatenation is combining 2 or more strings to make a new strings in order to create a new string concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster | . | Upper: used to check if the argument contains any uppercase characters returns &quot;True&quot; if all characters in the string are uppercase, Otherwise, It returns &quot;False&quot; | . | Lower: returns the lowercase string from the given string | Traversing Strings: the process of going through a String one character at a time, often using loops | . | Python If, Elif, Else conditionals; Nested Selection Statements If: statement executes a piece of code when one statement is false and the following statement is true Elif: first if statement isn&#39;t true, but want to check for another condition | Else: executes if &quot;if&quot; isn&#39;t true | Nested Conditionals: when more than one decision must be made before the appropriate action can be taken | . | . | Python For, While loops with Range, with List For: Process stops if next element meets statement | While: Process is repeated until statement is met | While with range: | While with list: | . | Combining loops with conditionals to Break, Continue | Procedural Abstraction, Python Def procedures, Parameters, Return Values python def procedures: Defines an abstracted function | parameters: A numerical or other measurable factor forming one of a set that defines a system or sets the conditions of its operation. | return values: The result of a function returned to the caller | . | . x = 3 # x would be the variable # Datatypes str = &quot;Claire&quot; int = 10 bool = True char = &quot;a&quot; Real = 4.1222222 # assignment operator is = # List numbers = [1, 2, 3, 4] # 2D List rows, cols = (5, 5) # 5 rows and 5 columns arr = [[0]*cols]*rows for row in arr: print(row) # Dictionaries import random # random is the dictionary (outside source) diceRoll = random.randint(1,6) # random number from 1 to 6 print(diceRoll) # Class class Person: def __init__(self, name, age): self.name = name self.age = age p1 = Person(&quot;Claire&quot;, 16) print(p1.name) print(p1.age) # Algorithm: sequence, selction, and iteration temp = 70 if temp &lt; 50: print(&quot;stay inside&quot;) else: print(&quot;go outside&quot;) # selection using conditionals petals = 8 while (petals &gt; 0): print(petals) petals -= 1 if petals == 0: print(&quot;no more petals&quot;) # iteration using while loop # Expression a = 1 b = 2 c = 3 result = (a*b)/c print(result) # Comparison Operators 1 != 2 # 1 is not equal to 2, will output true 3 &gt;=4 # 3 is greater than or equal to 4, will output false # String print(&quot;Hello Everyone&quot;) # Length length = len(&quot;Hello Everyone&quot;) print(length) # space counts as a character # Concantation s1 = &#39;Hello&#39; s2 = &#39;Everyone&#39; s3 = s1 + s2 print(s3) # Upper txt = &quot;Hello Everyone&quot; x = txt.upper() print(x) # Lower txt = &quot;HELLO EVERYONE&quot; x = txt.lower() print(x) # Tranversing String string_name = &quot;hello everyone&quot; # Iterate over the string for element in string_name: print(element, end=&#39; &#39;) print(&quot; n&quot;) # Conditionals temp = 55 if temp &lt; 50: print(&quot;it&#39;s cold&quot;) elif temp &gt; 80: print(&quot;it&#39;s hot&quot;) else: print(&quot;good wheather&quot;) # Nested Conditionals print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) # For Loop members = [&quot;Annika&quot;, &quot;Claire&quot;, &quot;Grace&quot;] for x in members: if x == &quot;Claire&quot;: break print(x) # While Loop i = 1 while i &lt; 6: print(i) i += 1 # with range while i in range(1,2): print(&quot;Claire&quot;, i) # with list thislist = [&quot;Annika&quot;, &quot;Claire&quot;, &quot;Grace&quot;] for i in range(len(thislist)): print(thislist[i]) # Parameters import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Define and Return Procedures # goal (x+1)(x-2) x = int(input()) def add(a): return a + 1 def multiply(a): return a - 2 def equation(x): addX = add(x) multiplyY = multiply(x) return addX * multiplyY result = equation(x) print(result) . [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] 4 Claire 16 go outside 8 7 6 5 4 3 2 1 no more petals 0.6666666666666666 Hello Everyone 14 HelloEveryone HELLO EVERYONE hello everyone h e l l o e v e r y o n e .",
            "url": "https://clairechen3.github.io/clairerepos/vocab3",
            "relUrl": "/vocab3",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Unit 3 Notes",
            "content": "1-2 . Variables . Variables are containers that hold a certain value/ data | there are different datatypes that a variable can store string (text/ letters) | int (number) | boolean (true false) | . | to assign a value to a variable, you use an assignment operator which is (=) -&gt; in pseudocode | . | variables should align with the data that it stores | . name = &quot;claire&quot; # can print just the variable instead of the whole name print(c) # this datatype is string so you need &quot;&quot; . claire . a = 1 # ints don&#39;t need &quot;&quot; print(a) . 1 . Answer = True print(a) . True . Strings and Lists . strings can be a series of words or numbers (including phone numbers) | lists store a series of variables, words, or numbers | syntax: square brakets | easier than assigning variable to each value | . name1 = &quot;claire&quot; name2 = &quot;claire&quot; name3 = &quot;grace&quot; name4 = &quot;annika&quot; print(name1, name2, name3, name4) # yes names = [&quot;claire&quot;, &quot;claire&quot;, &quot;grace&quot;, &quot;annika&quot;] print(names) . claire claire grace annika [&#39;claire&#39;, &#39;claire&#39;, &#39;grace&#39;, &#39;annika&#39;] . 3-4 . Algorithms . set of instructions to do certain tasks | parts of an algorithm sequence (order) | selection (decision dependant on condition) | iteration (loop until condition is met) | . | . Sequence . step 1 | step 2 | step 3 ##### Selection | if this is right, then do this | otherwise, do that ##### Iteration | repeat this step until you get this | . Arithmetic Operators . add | subtract | multiply | divide | mod (remainder) | . Answer = 1 + 1 print(Answer) . 2 . Answer = 1 - 1 print(Answer) . 0 . Answer = 1 * 1 print(Answer) . 1 . Answer = 1 / 1 print(Answer) . 1.0 . Answer = 1 % 1 print(Answer) # 1/1 has no remainder . 0 . Strings . len (string) | concat (str1, str2) | substring (str1, str2, length) | . len(&quot;claire&quot;) # print the number of letters . 6 . string = &quot;ClaireChen&quot; print(string[2:6]) # prints 2nd to 6th letter . aire . 5-7 . Boolean (true false) | rational operators equal to | greater than | less than | . | logical operators not (opposite) | and (if both apply) | or (if either apply) | . | . isRaining = False # if it is not raining result = not(isRaining) # the result is the opposite of raining (is not raining) print(result) . True . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;passed&quot;) . passed . flower = &quot;red&quot; if flower == &quot;red&quot; or &quot;green&quot;: print(&quot;red or green flower&quot;) # either red or green . red or green flower . Conditionals . if | then | else if/ elif | this is selection | . flower = 3 if flower == 1: print(&quot;flower&quot;) elif flower &gt;= 1: print(&quot;bouquet&quot;) . bouquet . Nested Conditionals . conditionals within conditionals | . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) # first conditional if reply1 == &quot;yes&quot;: # within the condition yes, you can enter your fav character print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) # if you enter Emily, it prints yay, othewise it prints oh if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) # from the first yes or no conditional, if you dont say yes, it prints you should else: print(&quot;you should&quot;) . Have you watched criminal minds? Who&#39;s your favorite character yay . 8-10 . Iteration: repeats a specified number of times or until a given condition is met . | Iteration Statements: repeats zero or more times, until a stopping condition is met . | Traversing Lists: all elements in the list are accessed (can be partial or complete) | . i = 0 # starting from 0, if from one it would print 4 times while (i &lt; 5): # print repeat 5 times print(&quot;repeat&quot;) i = i + 1 . repeat repeat repeat repeat repeat . for i in range(1,11): # start from 1 up until 11, kind of like intervals in math print(i) . 1 2 3 4 5 6 7 8 9 10 . difference between for and while loops . for loop is used when the number of iterations is known while loop is repeated until the statement in the program is proved wrong . list recap . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | . 12-13 . Procedures: basically same as function | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | . x = 5 y = 3 # kind of states the variables being used in the function def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . how to call a function . nameFunction(parameters) | . num = 5 # the function math is being called # the parameter is x def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . the return statemnt . A return statement ends the execution of a function, and returns control to the calling function | . # called function named divide # parameters are num1 and num2 def divide(num1,num2): x = num1/num2 return x . Vocab . Modularity - breaking a complex program into smaller, independent parts (modules) that can be used and reused in different parts of the program | Abstraction - hiding the details of how a particular code or system works and exposing only the essential features or functions (make it look clean) | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency (bad) | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . # this function squares numbers to avoid duplicates def square(a): return a * a # this function returns the square root of the sum of the two squared legs to find the hypotenuse def hypotenuse_abstracted(leg1, leg2): leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) . 14-15 . Libraries . A library has functions that can later be accessed in new programs | A library is a collection of code from another source that can be used to add functionality to a program save time and effort in the development process | &quot; .&quot; tells the program to look for the library and use its code | . | . import math x = int(input()) math.sqrt(x) . 3.0 . Random . randomly generates a number between a set of two given numbers | have to import the library random | . import random answer1 = random.randint(0,3) print(answer1) . 1 . random has a lot of different methods like . - seed() | Initialize the random number generator - getstate() | Returns the current internal state of the random number generator - setstate() | Restores the internal state of the random number generator - getrandbits() | Returns a number representing the random bits - randrange() | Returns a random number between the given range - randint() | Returns a random number between the given range . 16 . Simmulation . def: a virtual experiment or an immitation of a process | ex. testing the safety of a car or a game | . Experiment . a process done to make a discovery, test a hypothesis, or demonstrate a known fact | . simulations can be safer, cheaper, and more efficient, but also less accurate | simulations aren&#39;t always the same | . 17-18 . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . Iteration . The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. .",
            "url": "https://clairechen3.github.io/clairerepos/Notes3",
            "relUrl": "/Notes3",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "3.12-3.13 Hacks",
            "content": "Topic 3.12 (3.A): . Define procedure and parameter in your own words Procedure: aka functions/methods are basically instructions that can store parameters and return values | Parameter: variables used in procedure | . | Paste a screenshot of completion of the quiz | . Define Return Values and Output Parameters in your own words Return Values: does a function and tells python to finish the procedure and return a certain value | Output Parameters: variables used in procedure (same thing as function parameters) | . | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | import math # make function def root(x): result = math. sqrt(x) return result # get result and print result = root(9) print(result) . 3.0 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective it makes your code more concise, and able to do more things | . | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) goal: (x+1)(x-2) | I can use subprocedures for this to get the product of x+1 and x-2 becuse I need to do three calculations to get the result | inputed 9 | . | x = int(input()) def add(a): return a + 1 def multiply(a): return a - 2 def equation(x): addX = add(x) multiplyY = multiply(x) return addX * multiplyY result = equation(x) print(result) . 70 . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | x = input() # this function takes a string as input and returns a list of words, where each word # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_x_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words # set the value of the variable x as the letter the function is looking for count = count_words_starting_with_letter(words, x) return count # example usage: s = &quot; hello claire &quot; x_count = count_words_starting_with_x_in_string(s) # change to be words starting with whatever letter is inputed print(&quot;Words starting with&quot;, x, &quot;:&quot;, x_count) . Words starting with h : 1 . Topic 3.13 (3.C): . Define procedure names and arguments in your own words. Procedure Names: the name of the function (useful so you can call the function later) | Arguments: provides information to a function from outside that function | . | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | 1st Number : 2nd Number: Result: . .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/08/312-313.html",
            "relUrl": "/unit%203%20lessons/2022/12/08/312-313.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "3.8-3.10 Hacks",
            "content": "Hack 1 . Iteration: Part of an Algorithm that repeats itself until a certain condition is met . Start | the number of petals on a flower is 8 | pick off one petal, and number of petals goes down by one | How many petals are left? | repeat step three until number of petals is zero | Finish | numPetals = 8 while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;I am smart&quot;) if numPetals % 2 == 1: print(&quot;I am dumb&quot;) . 7 I am dumb 6 I am smart 5 I am dumb 4 I am smart 3 I am dumb 2 I am smart 1 I am dumb 0 No More Petals I am smart . Iteration Statement: loop repeats zero or more times, until disturbed (loop is stopped) . i=3 while i&lt;=81: print(i) i=i+13 . 3 16 29 42 55 68 81 . Hack 2 . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;] for i in colors: if i == &quot;green&quot;: break print(i) # it will stop printing after yellow, prints until green . red orange yellow . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] least = min(nums) # minimum print(min(nums)) # print minimum for i in nums: # loop to check if there are any smaller numbers if i &lt; (min(nums)): #if there are any numbers that are even smaller than the one before, it will print the new one, but there isn&#39;t. print(i) . 38 . Reference sheet notes (4) . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | .",
            "url": "https://clairechen3.github.io/clairerepos/hacks810",
            "relUrl": "/hacks810",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "3.5-3.7 Hacks",
            "content": "Hack 1 . Logical Operators . not Shows/does the opposite of the data | mostly used for true false | ex. if you assign red to false, and then you have a variablle called result that you assign the value not(red) to, then it will output true | code example: | . | . isRed = False green = not(isRed) print(green) . and evaluates two conditions together and if both conditions are met and only if both conditions are met, will the final result be shown | ex. if flower = red and flower = green print(&quot;christmas flower&quot;) the flower has to be both red and green for the algorithm to print chirstmas flower, if only red, christmas flower will not be printed | code example: | . | . flower = 50 if flower &gt;= 1 and flower &lt;= 100: print(&quot;bouquet&quot;) if flower &gt;= 100: print(&quot;garden&quot;) . or only one of the two conditons has to be met | ex. if temp &gt;=100 or temp &lt;= 20 print (&quot;stay home&quot;) | code example: | . | . temp = 101 if temp &gt;= 100 or temp &lt;= 20: print(&quot;stay home&quot;) . Hack 2 . Conditionals . evaluates actions in the program (true or false) . Selection: the result of this block of a selection depends on if a condition is true or false Algorithm: instructions/steps to accomplish a certain task, or solve a different problem Conditional Statement: executes certain statements depending on if it is true or false . Binary Conditional Logic . print(&quot;please enter a number&quot;) x = int(input()) if x % 2 == 0: # if x is divisible by 2 with no remainder print(x, &quot;is even&quot;) else: # if x is not divisible by 2 with no remainder print(x, &quot;is odd&quot;) . Nested statement 1 . print(&quot;are you happy?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;no&quot;: print(&quot;why be sad when you can be glad&quot;) if reply == &quot;yes&quot;: print(&quot;good for you&quot;) . Nested Statement 2 . print(&quot;what holiday do you celebrate?&quot;) reply = input(&quot;Christmas or Hanukkah&quot;) if reply == &quot;Hanukkah&quot;: print(&quot;Happy hanukkah!&quot;) elif reply == &quot;Christmas&quot;: print(&quot;Merry Chirstmas!&quot;) else: print(&quot;Happy Holidays!&quot;) . Nested Statement 3 . print(&quot;are you a swiftie?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;yes&quot;: print(&quot;slay!&quot;) else: print(&quot;oh.&quot;) . display 4 statements . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) . Stem or no stem? . print(&quot;are you interested in stem?&quot;) reply1 = input(&quot;yes or no&quot;) if reply1 == &quot;yes&quot;: list1 = [&quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;AP Statistics&quot;] print(&quot;you should take&quot;, list1) else: list2 = [&quot;AP Human Geography&quot;, &quot;AP World&quot;, &quot;AP English Language&quot;] print(&quot;you should take&quot;, list2) .",
            "url": "https://clairechen3.github.io/clairerepos/hacks57",
            "relUrl": "/hacks57",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/11/30/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/11/30/ErrorPractice.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "3.3-3.4 Hacks",
            "content": "Hack 1 . Sequencing: . set item to number to search for | get next number in the list | if number = item, display &quot;item found&quot; | if there are more numbers in the list, go back to step 2 | display &quot;item not found&quot; Selection: | if number = item, display &quot;item found&quot; Iteration: | if there are more numbers in the list, go back to step 2 | Hack 2 . num1 = 5 num2 = num1 3 num3 = num2 / num1 (9 % 2) 4 result = (num3 % num1 + num2) % num3 3 / 5 . 5 | 5*3= 15 | 15/5=3 1=34=12 | 12/5 +15=17 % 12 = 5*3 = 15/5 = 3 | Crossword . 1 down - iteration 2 down - selection 3 across - sequence .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/11/29/33-34.html",
            "relUrl": "/unit%203%20lessons/2022/11/29/33-34.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 34 17 52 26 13 40 20 10 5 16 8 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 13 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment for Algorithm Efficiency . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . Hacks Overview . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | .",
            "url": "https://clairechen3.github.io/clairerepos/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "3.1-3.2 Hacks",
            "content": "simplified food list: lists are better because it makes your code sorter and more efficient . foods = [&#39;pizza, hotdog, sushi, strawberry, sandwich&#39;] print(foods) . [&#39;pizza, hotdog, sushi, strawberry, sandwich&#39;] . color1 = &quot;red&quot; color2 = &quot;orange&quot; color3 = &quot;yellow&quot; color4 = &quot;green&quot; color5 = &quot;blue&quot; color6 = &quot;indigo&quot; color7 = &quot;violet&quot; print(color1, color2, color3, color4, color5, color6, color7) color = [&#39;red, orange, yellow, green, blue, indigo, violet&#39;] print(color) . red orange yellow green blue indigo violet [&#39;red, orange, yellow, green, blue, indigo, violet&#39;] . num1=input(&quot;Input first number. &quot;) num2=input(&quot;Input second number. &quot;) num3=input(&quot;Input third number. &quot;) add=input(&quot;How much would you like to add to each number? &quot;) # Add code in the space below num1 = int(num1) num2 = int(num2) num3 = int(num3) numlist = [num1 , num2, num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [2, 3, 4] . Create a list with indices | Index a part of the list that you created. | Try to index from the end ### index dog from front and end | . petsList = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;bird&quot;] print(petsList) print(petsList[1]) print(petsList[-3]) . [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;, &#39;bird&#39;] dog dog . What is a list? . A list of values or variables that can be assigned all at once | . What is an element . the things in a list | . What is an easy way to reference the elements in a list or string? . print(name of list) | . What is an example of a string? . hello | . Create an index of your favorite foods . favFood = [&quot;sushi&quot;, &quot;pasta&quot;, &quot;strawberries&quot;, &quot;tiramisu&quot;, &quot;potato&quot;] print(favFood) in1 = input(&quot;Input number&quot;) print(favFood[int(in1)-1]) . [&#39;sushi&#39;, &#39;pasta&#39;, &#39;strawberries&#39;, &#39;tiramisu&#39;, &#39;potato&#39;] sushi . In your own words, briefly explain by writing down what an assignment operator is . an operator that assigns values to variables | . In Collegeboard pseudocode, what symbol is used to assign values to variables? . -&gt; an arrow | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . if you print x it would display 22 because code is read from top to bottom and meaning if the variable is reassigned later on in the code, the reassigned value will be the one that is displayed | . print(&quot;name:&quot;) name = input(&quot;what&#39;s your name?&quot;) print(&quot;my name is&quot;, name) print(&quot;age:&quot;) age = input(&quot;how old are you?&quot;) print(&quot;I am&quot;, age, &quot;years old&quot;) print(&quot;phone number:&quot;) phoneNumber = input(&quot;what&#39;s your phone number&quot;) print(&quot;my phone number is&quot;, phoneNumber) . name: my name is claire age: I am 16 years old phone number: my phone number is 8582394568 .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/11/28/31-32.html",
            "relUrl": "/unit%203%20lessons/2022/11/28/31-32.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Tri 2 Cumulative Notes",
            "content": "meta data . ex. name of a person | meta means: kind of, sort of, like | data about the data | front matter (title description) | . liquid code . in html | on csp exam all indices start with 1 | . pre processing step in actions before goes into browser to generate liquid to html code .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%2013/2022/11/17/CumulativeNotes.html",
            "relUrl": "/markdown/week%2013/2022/11/17/CumulativeNotes.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Algorithm College Board Notes",
            "content": "3.9 Video 1 . What I need to cover in this lesson: . Algorithms can be written in different ways and still do the same thing | However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | Some conditional statements can be written as equivalent boolean expressions | . something as minor as writing a &gt; instead of a &gt;= can change the result of an entire algorithm (differentiate 2 algorithms) create two algorithms that look similar but display different results for example | assign fixing one of the algorithms to have both results be the same for homework | . | if else conditionals can be replaced by boolean expression create an if else statement and two boolean expressions to go with it (one that has the same result as the if else statement and one that doesn&#39;t) | assigning blogging about which boolean expression can replace the if then statement and why | . | explain how being able to spot these differences in algorithms will be important to us assign blogging about how they will use knowledge about algorithms to work on team projects in the future | . | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%2013/2022/11/17/AlgorithmNotes.html",
            "relUrl": "/markdown/week%2013/2022/11/17/AlgorithmNotes.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Algorithms",
            "content": "A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. Q: How many ways are there to peel a banana? Is the result the same? . Main Idea 1: . Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples! . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Nice! . yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . So, why is this important? Why are we even doing this? . when 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. - just know that codes that look similar don&#39;t always produce the same things:) . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Do Better . Why is this important? When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . Hacks: . Make your own version of this! requirements: . main goal of algorithm | main/base algorithm (ideal algorithm) | an algorithm that visual looks like the first one but is flawed, has a different result, or both explain the flaw either in notes of your code or in a markdown | . | an algorithm that looks very different from first algorithm but has some result/ solves the same problem explanation/ comparison of this algorithm with the first one | . | . The Algorithms don&#39;t have to be super complicated! But it should be complex enough to show a good understanding of this lesson as well as previous ones . Scoring Rubric: . 0.05 for an interesting goal | 0.05 for a well completed main algorithm | 0.05 for algorithm that looks the same but is different | 0.05 for algorithm that looks different but is the same | 0.05 for explanation of both algorithms above | total: 0.25 | . Extra things to add to notes:) . why having this understanding of algorithms is important to you as a coder | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/11/15/Algorithm.html",
            "relUrl": "/markdown/week%208/2022/11/15/Algorithm.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/11/14/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/11/14/ErrorPractice.html",
            "date": " • Nov 14, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "Final Test Corrections",
            "content": ". needs location to find restaurants near them, only Alejandra’s contact list is needed because shes the one hosting it. | . . until count is greater than max, that means it will print all numbers less than or equal to max | . . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. | . . overflow error will occur because SUM of 14 and 15 is larger than the largest binary value that can be represented using 4 bits which is 1111 | . . 4 bits can be represented as 2^4=16, which means 4 bits can store 16 pieces of information, only 8 pieces of information has to be stored, so 4 bits is enough | . . first 4 is assigning variables, after those four lines, values are reassigned | p becomes 20, q becomes 30, s becomes 20, r becomes 20 | . . Since num1 is not less than num2, num3 becomes 4, | Since num2 is greater than or equal to num3, num1 becomes 8 | So, num1 + num2 + num3 = 8 + 4 + 4 =16 | . . The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. | . . count1 adds 1 for each positive value and count2 adds 1 for every negative or 0 value | . . the first two lines are assigning the value true to “first” and the value false to “second”, the next two are reassigning values | “second” becomes true, “first” becomes true | . . similar to 46, the first three lines are assigning values to the variables, then for every next line, it is reassigning the values | so x becomes 50, y becomes 75, and z becomes 50. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/07/FinalTestCorrections.html",
            "relUrl": "/markdown/2022/11/07/FinalTestCorrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post54": {
            "title": "Night at the Museum",
            "content": ". my group and I working on finishing touches, organizing who is going to present what, and practicing presenting | looking at other group’s csp project, seeing what they did that we can implement in our own project. However, some groups including ours were having trouble with some parts of the project whether it be the API, connecting frontend and backend, etc, so it was good to know that other people are having trouble with the same things and that we have a lot of people to ask and help out when problem occur. I really liked this groups use of an API to potentially tell you what illness you have based on your symptoms. I could see this being really helpful especially after a worldwide pandemic | Lastly, we looked around the art department and visited ceramics and AP studio art. I loved seeing all the amazing creations that fellow Del Norte students have made and I was able to find some pieces that my friends in those classes made which was cool. I don’t have any pictures of ceramics, but there was a turtle pot that was really cool and detailed which I really liked. In AP studio art I also so a bunch of really amazing pieces using all types of mediums. But seeing the skill the AP studio art students have kind of discourages me from taking AP studio art, because I wanted to take it in my senior year, but I haven’t been practicing my art, and my skills are nowhere near as good as theirs. Overall, night at the museum was pretty fun, but kind of stressful. | Ideas for next time: Although games are really fun and can halp you destress, I think maybe next time I want to try something that can be used on the day-to-day and make life a little easier. An example would be the illness identifier that I mentioned above, an online journal entry, or a grade calculator. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/04/NATMblog.html",
            "relUrl": "/markdown/2022/11/04/NATMblog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post55": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/15/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/10/15/ErrorPractice.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post56": {
            "title": "College Board Internet Notes",
            "content": "Video 1 . computers used to be really big but got progressively smarter | computers send and receive data | computers understand electrons represented by numbers &quot;talk number&quot; | we have to translate our information into numbers and packets | packets: small amount of data sent over a network packet includes source and destination | . | creation of computer systems computer systems are groups of computing devices and programs working together for a joint purpose | . | computer network is a group of computing devices that send and receive data | router helps with packet switching (guides message from sender to receiver) Packet: message that is broken up into packets and sent in any order | . | bandwidth: maximum amount of data that can be sent in an amount of time(bits per second) the more data the slower it might take to get from sender to receiver (like traffic) | . | . Video 2 . computer protocol (rules of the road) | computer protocol models OSI | TCP layers you have to go through to communicate (7 layers of protocol) | . | . | layer 1: Network Acess layer ex. wifi card | deliver packets from one network interface card (NIC) to another aka &quot;hop&quot; | . | layer 2: Internet Layer Data Transmission a packet contains data that is being transimitted and metadata(information for routing messages) | one device with a certain IP address is sending a message on on that path, they run into routers that help guide them to the IP address of the other device the message is trying to reach | . | layer 3: Transport Layer TCP slower but reliable | UDP faster but does not guarantee transfers | computer is sending IP addresses through bits | . | layer 4: Application Layer DNS (domain name service), human language to IP address | web servers are programs running on machines connected to internet | www (world wide web) is a network of linked programs and data running over the internet | . | http is a protocol used by world wide web | routes are flexible | world wide web is not the internet | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "relUrl": "/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post57": {
            "title": "Week 7 College Board Notes",
            "content": "programmers run into a lot of errors it is expected so we need to know how to solve | . | Types of errors: logic errors: mistake in algorithm that causes unexpected output | . | syntax errors: typo in code (doesn&#39;t follow rule in language) | forget to add (&quot;&quot;,:{}, etc) | . | run-time error makes a program fail while running | aka bug | runs initially, but can&#39;t complete process | ex. dividing by 0 | . | overflow error when program is required to calculate something that is outside of range of values. | . | . | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "relUrl": "/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post58": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot; payload = &quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;cfb16a4106mshdbb9be413abfd1dp1aef68jsn13566184f01a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;detections&#34;:[[{&#34;confidence&#34;:1,&#34;language&#34;:&#34;en&#34;,&#34;isReliable&#34;:false}]]}} . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://clairechen3.github.io/clairerepos/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post59": {
            "title": "College Board Assignment Check",
            "content": ". Things I did to improve . watch video (didn’t watch the right one the first time I took the quiz) | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/10/02/CBprogress.html",
            "relUrl": "/markdown/2022/10/02/CBprogress.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post60": {
            "title": "Scrum process",
            "content": ".",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/ScrumProcess.html",
            "relUrl": "/markdown/2022/09/25/ScrumProcess.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post61": {
            "title": "Java Usage",
            "content": "Navigation Bar | Java program | Java Usage | . } . Java Table . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/JavaUsage.html",
            "relUrl": "/markdown/2022/09/25/JavaUsage.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post62": {
            "title": "Java Script Kernel",
            "content": "Navigation Bar | Java program | Java Usage | . } . console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Claire&quot;, &quot;ClaireChen3&quot;, 2024), new Person(&quot;Aliya&quot;, &quot;aliyatang&quot;, 2025), new Person(&quot;Sreeja&quot;, &quot;sreejagangapuram&quot;, 2024), new Person(&quot;Ananya&quot;, &quot;Ananayag2617&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Claire&#39;, ghID: &#39;ClaireChen3&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Aliya&#39;, ghID: &#39;aliyatang&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Sreeja&#39;, ghID: &#39;sreejagangapuram&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Ananya&#39;, ghID: &#39;Ananayag2617&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Claire | ClaireChen3 | 2024 | Student | Aliya | aliyatang | 2025 | Student | Sreeja | sreejagangapuram | 2024 | Student | Ananya | Ananayag2617 | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "relUrl": "/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post63": {
            "title": "Docker server",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/18/docker-server.html",
            "relUrl": "/markdown/2022/09/18/docker-server.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post64": {
            "title": "Psychology and the Good Life Video Notes",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "relUrl": "/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post65": {
            "title": "Week 4 College Board Notes",
            "content": "Video 1: . companies like google collaborate to create a cohesive company (ios, android, art, social media) | collaboration helps us to compare or combine our ideas to | collaborating produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it produce the best result. | . Video 2: . ways to collaborate in APCSP . pair programming one driver(types the program) | one observer(reviews drivers code) | . | Think, Pair, Share think about a problem alone | share with partner (help one another, compare) | share with class/others | . | leave comments in code( ) to communicate to yourself and others what the code is doing | clarify function of the code | . | get feedback from others | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "relUrl": "/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post66": {
            "title": "Creative Performance Task Outline",
            "content": "Ideas: . make an online recipe book | make a jewelry portfolio | . Program Purpose and Function . A blog-like program that has posts of each recipe ### Data Abstraction | Make &quot;flippable pages&quot; allow user to be able to flip through the posts like pages in a recipe book TOC? | Audio option? | Video instructions? ### Managing Complexity | . | use lists within code ### Procedural Abstraction | code for flippable pages (haven&#39;t figured it out yet) will help users navigate through the recipe book easily ### Algorithm Implementation | make libraries so you can call things out easily and keep code organized | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CreativePerformance.html",
            "relUrl": "/markdown/week%203/2022/09/11/CreativePerformance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post67": {
            "title": "App Lab Quiz",
            "content": "Link to my App Lab . Design . Purpose and function: . to quiz people on how well they now music albums of multiple genres #### Quiz Topic: | Guess the album name by the album cover #### Quiz Questions: | multiple choice (easy mode 2 questions) | free response (hard mode 2 questions) #### Quiz layout: picture of albums at the top and multiple choice answers below #### Special ideas: | easy and hard mode | add sound add hints | add gifs #### albums to use | Renaissance | Abbey Road | Anti | After Hours #### Successes: | adding sound! #### Discoveries | how to use set time function | how to use if then #### Challenges | coding free response questions | using the if then function, blocks are fun! | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CodeQuiz.html",
            "relUrl": "/markdown/week%203/2022/09/11/CodeQuiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post68": {
            "title": "Python List",
            "content": "# variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Claire&quot;, &quot;LastName&quot;: &quot;Chen&quot;, &quot;DOB&quot;: &quot;August 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;claireweichingchen@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;none&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Claire&#39;, &#39;LastName&#39;: &#39;Chen&#39;, &#39;DOB&#39;: &#39;August 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;claireweichingchen@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;none&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%202/2022/08/30/PythonList.html",
            "relUrl": "/markdown/week%202/2022/08/30/PythonList.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post69": {
            "title": "Alumni Panel Notes",
            "content": "How did you realize you want to do cs . Mechanical engineering is different than computer science | create functions, programs and algorithms. | CSA can help solidify your knowledge on computer science | Might not be easy but important to learn | Many different majors require programming experience and logical thinking background | Cog sci is psychology+computer science UX UI | Get technical skill from computer science | . | In csa you can learn how to apply programming skills She realized what she was creating could be used in real world | . | . Hardest part . Having error messages (syntax errors) Solution: try to google search it | . | Egos People are not very kind and brag | Solution: focus on you own path | . | Theory behind CS | Different structures | HS to college compsci is different | Hard to find the motivation Feeling not good enough | Solution: having a purpose to apply cs to | . | Programming logic (syntax) | Starting compsci later (as a senior) Solution: having mindset to go above and beyond | . | Not having an organized structure Solution: don&#39;t get so stuck on a plan, just start coding | . | . Project based learning . Will see in... . operative courses | Computer science major | Most UCs | Study in groups and work with others | . Apply compsci in non-compsci majors? . Copy pasting and converting data types | Can do advanced calculations | Program analysis | graphing/statistics (R ) | . Job with school or professor . Go to office hours | Set yourself apart from the other students (go above and beyond) | TA, code ninjas, LG, | . Resume done by early september for internships Build networks .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "relUrl": "/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post70": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/claire/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/claire/.local/share/jupyter/kernels/python3 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/claire/.local/share/jupyter/kernels/bash javascript /home/claire/.local/share/jupyter/kernels/javascript python3 /home/claire/.local/share/jupyter/kernels/python3 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/28/InstallationCheck.html",
            "relUrl": "/markdown/week%201/2022/08/28/InstallationCheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post71": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 2 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is the key word to define a function?&quot;) if rsp == &quot;def&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;what input returns an output back to the user&quot;) if rsp == &quot;msg&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, claire running /bin/python3 You will be asked 2 questions. Question: Are you ready to take a test? Answer: Question: What is the key word to define a function? def is correct! Question: what input returns an output back to the user def is incorrect! claire you scored 1/2 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/26/PythonQuiz.html",
            "relUrl": "/markdown/week%201/2022/08/26/PythonQuiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post72": {
            "title": "Python Hello",
            "content": "python print hello . - toc: true - branch: master - badges: true - comments: true - author: Claire Chen - categories: [fastpages, jupyter] . print (&quot;hello&quot;) . hello . msg = input(&quot;Enter a greeting: &quot;) print(msg) . hello .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/24/PythonHello.html",
            "relUrl": "/markdown/week%201/2022/08/24/PythonHello.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post73": {
            "title": "Markdown Post",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/08/22/Markdown.html",
            "relUrl": "/markdown/2022/08/22/Markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post74": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | . | | | . | . .",
            "url": "https://clairechen3.github.io/clairerepos/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Claire's Markdown Post",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-22-Markdown.html",
          "relUrl": "/_pages/2022-08-22-Markdown.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Claire's Jupyter Notebook",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-26-Jupyter.html",
          "relUrl": "/_pages/2022-08-26-Jupyter.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Terms to Know . input = instructions you give to a computer | output = information computer gives to you | sequence = several lines of code together | . Python Linux Commands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory | Python syntax print(“”) | .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-29-Vocab.html",
          "relUrl": "/_pages/2022-08-29-Vocab.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Class Progress",
          "content": "Week Topics Notes . 3 😴 | Lists, dictionaries, loops, tables and tags | Links | . 2 🤨 | Lists, dictionaries, loops, tables and tags | Links | . 1 🤧 | Python hello, Python quiz, Python commands, Bash and Tools check | Links | . 0 😐 | Install: VScode, IDE, Jupyter, Python, Anaconda, wsl, kernels | Links | .",
          "url": "https://clairechen3.github.io/clairerepos/Class%20Progress",
          "relUrl": "/Class Progress",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Submenu",
          "content": "My Javascript Kernel API .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-09-26-Submenu.html",
          "relUrl": "/_pages/2022-09-26-Submenu.html",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "About Me",
          "content": "I am Claire, a junior at Del Norte High School taking APCSP:) .",
          "url": "https://clairechen3.github.io/clairerepos/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  

  
  

  
      ,"page20": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://clairechen3.github.io/clairerepos/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}