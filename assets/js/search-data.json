{
  
    
        "post0": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/11/17/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/11/17/ErrorPractice.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Algorithm Examples",
            "content": "The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Wow! Good job! . yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Do Better .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/11/15/Algorithm.html",
            "relUrl": "/markdown/week%208/2022/11/15/Algorithm.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Final Test Corrections",
            "content": ". needs location to find restaurants near them, only Alejandra’s contact list is needed because shes the one hosting it. | . . until count is greater than max, that means it will print all numbers less than or equal to max | . . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. | . . overflow error will occur because SUM of 14 and 15 is larger than the largest binary value that can be represented using 4 bits which is 1111 | . . 4 bits can be represented as 2^4=16, which means 4 bits can store 16 pieces of information, only 8 pieces of information has to be stored, so 4 bits is enough | . . first 4 is assigning variables, after those four lines, values are reassigned | p becomes 20, q becomes 30, s becomes 20, r becomes 20 | . . Since num1 is not less than num2, num3 becomes 4, | Since num2 is greater than or equal to num3, num1 becomes 8 | So, num1 + num2 + num3 = 8 + 4 + 4 =16 | . . The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. | . . count1 adds 1 for each positive value and count2 adds 1 for every negative or 0 value | . . the first two lines are assigning the value true to “first” and the value false to “second”, the next two are reassigning values | “second” becomes true, “first” becomes true | . . similar to 46, the first three lines are assigning values to the variables, then for every next line, it is reassigning the values | so x becomes 50, y becomes 75, and z becomes 50. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/07/FinalTestCorrections.html",
            "relUrl": "/markdown/2022/11/07/FinalTestCorrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Night at the Museum",
            "content": ". my group and I working on finishing touches, organizing who is going to present what, and practicing presenting | looking at other group’s csp project, seeing what they did that we can implement in our own project. However, some groups including ours were having trouble with some parts of the project whether it be the API, connecting frontend and backend, etc, so it was good to know that other people are having trouble with the same things and that we have a lot of people to ask and help out when problem occur. I really liked this groups use of an API to potentially tell you what illness you have based on your symptoms. I could see this being really helpful especially after a worldwide pandemic | Lastly, we looked around the art department and visited ceramics and AP studio art. I loved seeing all the amazing creations that fellow Del Norte students have made and I was able to find some pieces that my friends in those classes made which was cool. I don’t have any pictures of ceramics, but there was a turtle pot that was really cool and detailed which I really liked. In AP studio art I also so a bunch of really amazing pieces using all types of mediums. But seeing the skill the AP studio art students have kind of discourages me from taking AP studio art, because I wanted to take it in my senior year, but I haven’t been practicing my art, and my skills are nowhere near as good as theirs. Overall, night at the museum was pretty fun, but kind of stressful. | Ideas for next time: Although games are really fun and can halp you destress, I think maybe next time I want to try something that can be used on the day-to-day and make life a little easier. An example would be the illness identifier that I mentioned above, an online journal entry, or a grade calculator. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/04/NATMblog.html",
            "relUrl": "/markdown/2022/11/04/NATMblog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/15/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/10/15/ErrorPractice.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "College Board Internet Notes",
            "content": "Video 1 . computers used to be really big but got progressively smarter | computers send and receive data | computers understand electrons represented by numbers &quot;talk number&quot; | we have to translate our information into numbers and packets | packets: small amount of data sent over a network packet includes source and destination | . | creation of computer systems computer systems are groups of computing devices and programs working together for a joint purpose | . | computer network is a group of computing devices that send and receive data | router helps with packet switching (guides message from sender to receiver) Packet: message that is broken up into packets and sent in any order | . | bandwidth: maximum amount of data that can be sent in an amount of time(bits per second) the more data the slower it might take to get from sender to receiver (like traffic) | . | . Video 2 . computer protocol (rules of the road) | computer protocol models OSI | TCP layers you have to go through to communicate (7 layers of protocol) | . | . | layer 1: Network Acess layer ex. wifi card | deliver packets from one network interface card (NIC) to another aka &quot;hop&quot; | . | layer 2: Internet Layer Data Transmission a packet contains data that is being transimitted and metadata(information for routing messages) | one device with a certain IP address is sending a message on on that path, they run into routers that help guide them to the IP address of the other device the message is trying to reach | . | layer 3: Transport Layer TCP slower but reliable | UDP faster but does not guarantee transfers | computer is sending IP addresses through bits | . | layer 4: Application Layer DNS (domain name service), human language to IP address | web servers are programs running on machines connected to internet | www (world wide web) is a network of linked programs and data running over the internet | . | http is a protocol used by world wide web | routes are flexible | world wide web is not the internet | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "relUrl": "/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Week 7 College Board Notes",
            "content": "programmers run into a lot of errors it is expected so we need to know how to solve | . | Types of errors: logic errors: mistake in algorithm that causes unexpected output | . | syntax errors: typo in code (doesn&#39;t follow rule in language) | forget to add (&quot;&quot;,:{}, etc) | . | run-time error makes a program fail while running | aka bug | runs initially, but can&#39;t complete process | ex. dividing by 0 | . | overflow error when program is required to calculate something that is outside of range of values. | . | . | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "relUrl": "/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot; payload = &quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;cfb16a4106mshdbb9be413abfd1dp1aef68jsn13566184f01a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;detections&#34;:[[{&#34;confidence&#34;:1,&#34;language&#34;:&#34;en&#34;,&#34;isReliable&#34;:false}]]}} . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://clairechen3.github.io/clairerepos/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "College Board Assignment Check",
            "content": ". Things I did to improve . watch video (didn’t watch the right one the first time I took the quiz) | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/10/02/CBprogress.html",
            "relUrl": "/markdown/2022/10/02/CBprogress.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Scrum process",
            "content": ".",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/ScrumProcess.html",
            "relUrl": "/markdown/2022/09/25/ScrumProcess.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Java Usage",
            "content": "Navigation Bar | Java program | Java Usage | . } . Java Table . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/JavaUsage.html",
            "relUrl": "/markdown/2022/09/25/JavaUsage.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Script Kernel",
            "content": "Navigation Bar | Java program | Java Usage | . } . console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Claire&quot;, &quot;ClaireChen3&quot;, 2024), new Person(&quot;Aliya&quot;, &quot;aliyatang&quot;, 2025), new Person(&quot;Sreeja&quot;, &quot;sreejagangapuram&quot;, 2024), new Person(&quot;Ananya&quot;, &quot;Ananayag2617&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Claire&#39;, ghID: &#39;ClaireChen3&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Aliya&#39;, ghID: &#39;aliyatang&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Sreeja&#39;, ghID: &#39;sreejagangapuram&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Ananya&#39;, ghID: &#39;Ananayag2617&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Claire | ClaireChen3 | 2024 | Student | Aliya | aliyatang | 2025 | Student | Sreeja | sreejagangapuram | 2024 | Student | Ananya | Ananayag2617 | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "relUrl": "/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Docker server",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/18/docker-server.html",
            "relUrl": "/markdown/2022/09/18/docker-server.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Psychology and the Good Life Video Notes",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "relUrl": "/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Week 4 College Board Notes",
            "content": "Video 1: . companies like google collaborate to create a cohesive company (ios, android, art, social media) | collaboration helps us to compare or combine our ideas to | collaborating produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it produce the best result. | . Video 2: . ways to collaborate in APCSP . pair programming one driver(types the program) | one observer(reviews drivers code) | . | Think, Pair, Share think about a problem alone | share with partner (help one another, compare) | share with class/others | . | leave comments in code( ) to communicate to yourself and others what the code is doing | clarify function of the code | . | get feedback from others | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "relUrl": "/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Creative Performance Task Outline",
            "content": "Ideas: . make an online recipe book | make a jewelry portfolio | . Program Purpose and Function . A blog-like program that has posts of each recipe ### Data Abstraction | Make &quot;flippable pages&quot; allow user to be able to flip through the posts like pages in a recipe book TOC? | Audio option? | Video instructions? ### Managing Complexity | . | use lists within code ### Procedural Abstraction | code for flippable pages (haven&#39;t figured it out yet) will help users navigate through the recipe book easily ### Algorithm Implementation | make libraries so you can call things out easily and keep code organized | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CreativePerformance.html",
            "relUrl": "/markdown/week%203/2022/09/11/CreativePerformance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "App Lab Quiz",
            "content": "Link to my App Lab . Design . Purpose and function: . to quiz people on how well they now music albums of multiple genres #### Quiz Topic: | Guess the album name by the album cover #### Quiz Questions: | multiple choice (easy mode 2 questions) | free response (hard mode 2 questions) #### Quiz layout: picture of albums at the top and multiple choice answers below #### Special ideas: | easy and hard mode | add sound add hints | add gifs #### albums to use | Renaissance | Abbey Road | Anti | After Hours #### Successes: | adding sound! #### Discoveries | how to use set time function | how to use if then #### Challenges | coding free response questions | using the if then function, blocks are fun! | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CodeQuiz.html",
            "relUrl": "/markdown/week%203/2022/09/11/CodeQuiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Python List",
            "content": "# variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Claire&quot;, &quot;LastName&quot;: &quot;Chen&quot;, &quot;DOB&quot;: &quot;August 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;claireweichingchen@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;none&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Claire&#39;, &#39;LastName&#39;: &#39;Chen&#39;, &#39;DOB&#39;: &#39;August 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;claireweichingchen@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;none&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%202/2022/08/30/PythonList.html",
            "relUrl": "/markdown/week%202/2022/08/30/PythonList.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Alumni Panel Notes",
            "content": "How did you realize you want to do cs . Mechanical engineering is different than computer science | create functions, programs and algorithms. | CSA can help solidify your knowledge on computer science | Might not be easy but important to learn | Many different majors require programming experience and logical thinking background | Cog sci is psychology+computer science UX UI | Get technical skill from computer science | . | In csa you can learn how to apply programming skills She realized what she was creating could be used in real world | . | . Hardest part . Having error messages (syntax errors) Solution: try to google search it | . | Egos People are not very kind and brag | Solution: focus on you own path | . | Theory behind CS | Different structures | HS to college compsci is different | Hard to find the motivation Feeling not good enough | Solution: having a purpose to apply cs to | . | Programming logic (syntax) | Starting compsci later (as a senior) Solution: having mindset to go above and beyond | . | Not having an organized structure Solution: don&#39;t get so stuck on a plan, just start coding | . | . Project based learning . Will see in... . operative courses | Computer science major | Most UCs | Study in groups and work with others | . Apply compsci in non-compsci majors? . Copy pasting and converting data types | Can do advanced calculations | Program analysis | graphing/statistics (R ) | . Job with school or professor . Go to office hours | Set yourself apart from the other students (go above and beyond) | TA, code ninjas, LG, | . Resume done by early september for internships Build networks .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "relUrl": "/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/claire/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/claire/.local/share/jupyter/kernels/python3 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/claire/.local/share/jupyter/kernels/bash javascript /home/claire/.local/share/jupyter/kernels/javascript python3 /home/claire/.local/share/jupyter/kernels/python3 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/28/InstallationCheck.html",
            "relUrl": "/markdown/week%201/2022/08/28/InstallationCheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 2 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is the key word to define a function?&quot;) if rsp == &quot;def&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;what input returns an output back to the user&quot;) if rsp == &quot;msg&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, claire running /bin/python3 You will be asked 2 questions. Question: Are you ready to take a test? Answer: Question: What is the key word to define a function? def is correct! Question: what input returns an output back to the user def is incorrect! claire you scored 1/2 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/26/PythonQuiz.html",
            "relUrl": "/markdown/week%201/2022/08/26/PythonQuiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Python Hello",
            "content": "python print hello . - toc: true - branch: master - badges: true - comments: true - author: Claire Chen - categories: [fastpages, jupyter] . print (&quot;hello&quot;) . hello . msg = input(&quot;Enter a greeting: &quot;) print(msg) . hello .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/24/PythonHello.html",
            "relUrl": "/markdown/week%201/2022/08/24/PythonHello.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Markdown Post",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/08/22/Markdown.html",
            "relUrl": "/markdown/2022/08/22/Markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | . | | | . 4 | 2 | 1 | . .",
            "url": "https://clairechen3.github.io/clairerepos/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Claire's Markdown Post",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-22-Markdown.html",
          "relUrl": "/_pages/2022-08-22-Markdown.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Claire's Jupyter Notebook",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-26-Jupyter.html",
          "relUrl": "/_pages/2022-08-26-Jupyter.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Terms to Know . input = instructions you give to a computer | output = information computer gives to you | sequence = several lines of code together | . Python Linux Commands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory | Python syntax print(“”) | .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-29-Vocab.html",
          "relUrl": "/_pages/2022-08-29-Vocab.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Class Progress",
          "content": "Week Topics Notes . 3 😴 | Lists, dictionaries, loops, tables and tags | Links | . 2 🤨 | Lists, dictionaries, loops, tables and tags | Links | . 1 🤧 | Python hello, Python quiz, Python commands, Bash and Tools check | Links | . 0 😐 | Install: VScode, IDE, Jupyter, Python, Anaconda, wsl, kernels | Links | .",
          "url": "https://clairechen3.github.io/clairerepos/Class%20Progress",
          "relUrl": "/Class Progress",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Submenu",
          "content": "My Javascript Kernel API .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-09-26-Submenu.html",
          "relUrl": "/_pages/2022-09-26-Submenu.html",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "About Me",
          "content": "I am Claire, a junior at Del Norte High School taking APCSP:) .",
          "url": "https://clairechen3.github.io/clairerepos/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://clairechen3.github.io/clairerepos/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}