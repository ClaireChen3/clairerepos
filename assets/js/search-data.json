{
  
    
        "post0": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2023/01/15/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2023/01/15/ErrorPractice.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "College Board Grading 2",
            "content": "Review the score given by the AP scorers and reflect: . on any discrepancies in your scoring versus the ap scoring My scores this time are definitely more like the college board scoring as I am getting more familiar with what the rubric is really looking for, but i still got a little confused on some small things, for example, what managing complexity through a list really looks like. | . on what your program will need to fulfill all requirements . have a user input | have an out put | preferably have something that shows the process of how the input resulted in the output | have a clear and detailed description of the function (what the program is doing) | have a clear and detailed description of the purpose (the general goal/ why you made the program) | describe the input that was inputed in the demonstration video and what happens to it in order to get the output | use lists that help manage complexity | have a function that can be called multiple times. | the function should include all the components of an algorithm | . | on the criteria and why a submission may have failed to meet the standard The forth submission didn&#39;t meet the standard for the third row because although they did have two lists, one of the lists wasn&#39;t really contributing anything to the functionality of the program and, therefore, didn&#39;t count . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2018/2023/01/15/CBGrading2.html",
            "relUrl": "/week%2018/2023/01/15/CBGrading2.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "3.5-3.7 Hacks",
            "content": "Hack 1 . Logical Operators . not Shows/does the opposite of the data | mostly used for true false | ex. if you assign red to false, and then you have a variablle called result that you assign the value not(red) to, then it will output true | code example: | . | . isRed = False green = not(isRed) print(green) . and evaluates two conditions together and if both conditions are met and only if both conditions are met, will the final result be shown | ex. if flower = red and flower = green print(&quot;christmas flower&quot;) the flower has to be both red and green for the algorithm to print chirstmas flower, if only red, christmas flower will not be printed | code example: | . | . flower = 50 if flower &gt;= 1 and flower &lt;= 100: print(&quot;bouquet&quot;) if flower &gt;= 100: print(&quot;garden&quot;) . or only one of the two conditons has to be met | ex. if temp &gt;=100 or temp &lt;= 20 print (&quot;stay home&quot;) | code example: | . | . temp = 101 if temp &gt;= 100 or temp &lt;= 20: print(&quot;stay home&quot;) . Hack 2 . Conditionals . evaluates actions in the program (true or false) . Selection: the result of this block of a selection depends on if a condition is true or false Algorithm: instructions/steps to accomplish a certain task, or solve a different problem Conditional Statement: executes certain statements depending on if it is true or false . Binary Conditional Logic . print(&quot;please enter a number&quot;) x = int(input()) if x % 2 == 0: # if x is divisible by 2 with no remainder print(x, &quot;is even&quot;) else: # if x is not divisible by 2 with no remainder print(x, &quot;is odd&quot;) . Nested statement 1 . print(&quot;are you happy?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;no&quot;: print(&quot;why be sad when you can be glad&quot;) if reply == &quot;yes&quot;: print(&quot;good for you&quot;) . Nested Statement 2 . print(&quot;what holiday do you celebrate?&quot;) reply = input(&quot;Christmas or Hanukkah&quot;) if reply == &quot;Hanukkah&quot;: print(&quot;Happy hanukkah!&quot;) elif reply == &quot;Christmas&quot;: print(&quot;Merry Chirstmas!&quot;) else: print(&quot;Happy Holidays!&quot;) . Nested Statement 3 . print(&quot;are you a swiftie?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;yes&quot;: print(&quot;slay!&quot;) else: print(&quot;oh.&quot;) . display 4 statements . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) . Stem or no stem? . print(&quot;are you interested in stem?&quot;) reply1 = input(&quot;yes or no&quot;) if reply1 == &quot;yes&quot;: list1 = [&quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;AP Statistics&quot;] print(&quot;you should take&quot;, list1) else: list2 = [&quot;AP Human Geography&quot;, &quot;AP World&quot;, &quot;AP English Language&quot;] print(&quot;you should take&quot;, list2) .",
            "url": "https://clairechen3.github.io/clairerepos/hacks57",
            "relUrl": "/hacks57",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Object-Oriented Programming",
            "content": "Notes . Object-Oriented Programming (OOP) uses classes as a blueprint for creating an Object which is then used like many other Python variables | Classes collect data, functions and procedures | An object is a part of a class and there can be many objects from one class each object also collects its own data | . | @ decorators: allow access to instance data without the use of functions | @property decorator (aka getter): enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter): enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | All instance data (self._name, self.email ...) are prefixed with &quot;&quot; | . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf #CLASS OF @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;class_of&quot;: self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob}, class_of={self._classOf})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&quot;1915&quot;) print(u1) u2 = User(name=&quot;Claire Chen&quot;, uid=&quot;clu&quot;, password=&quot;123clu&quot;, dob=date(2006,8,19), classOf=&quot;2024&quot;) print(u2) . {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;class_of&#34;: &#34;1915&#34;} {&#34;name&#34;: &#34;Claire Chen&#34;, &#34;uid&#34;: &#34;clu&#34;, &#34;dob&#34;: &#34;08-19-2006&#34;, &#34;age&#34;: 16, &#34;class_of&#34;: &#34;2024&#34;} . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class Login: def __init__(self, name, uid, password, phone, email): self._name = name # variables with self prefix become part of the object, self._uid = uid self._phone = phone self.set_password(password) self._email = email #CLASS OF @property def email(self): return self._email @email.setter def email(self, email): self._email = email @property def phone(self): return self._phone @phone.setter def phone(self, phone): self._phone = phone @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;phone&quot;: self.phone, &quot;email&quot;: self.email } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},phone={self._phone}, class_of={self._email})&#39; u1 = Login(name=&quot;Claire Chen&quot;, uid=&quot;clu&quot;, password=&quot;123clu&quot;, phone=&quot;000.000.0000&quot;, email=&quot;clairechengmail@gmail.com&quot;) print(u1) ###### For reference to see raw form ################ # print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;) # print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) # print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;) . {&#34;name&#34;: &#34;Claire Chen&#34;, &#34;uid&#34;: &#34;clu&#34;, &#34;phone&#34;: &#34;000.000.0000&#34;, &#34;email&#34;: &#34;clairechengmail@gmail.com&#34;} .",
            "url": "https://clairechen3.github.io/clairerepos/week%2015/2023/01/10/Hack.html",
            "relUrl": "/week%2015/2023/01/10/Hack.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "College Board Grading",
            "content": "Review the score given by the AP scorers and reflect: . on any discrepancies in your scoring versus the ap scoring For the fist row of the first submission, I got confused with the purpose and function so I checked it off on the checklist, but then I realized what the difference between purpose and function and noticed that the student did not have the purpose and probably got confused like I did. Other than that, my grading was pretty much the same as the college board ones. | . on what your program will need to fulfill all requirements . have a user input | have an out put | preferably have something that shows the process of how the input resulted in the output | have a clear and detailed description of the function (what the program is doing) | have a clear and detailed description of the purpose (the general goal/ why you made the program) | describe the input that was inputed in the demonstration video and what happens to it in order to get the output | use lists that help manage complexity | have a function that can be called multiple times. | the function should include all the components of an algorithm | . | on the criteria and why a submission may have failed to meet the standard The first submission didn&#39;t meet the standard because their descriptions for everything could&#39;ve been a lot more detailed and they were missing purpose of their project. Also, their list didn&#39;t help to manage the complexity of the program . | .",
            "url": "https://clairechen3.github.io/clairerepos/week%2015/2023/01/05/CBGrading.html",
            "relUrl": "/week%2015/2023/01/05/CBGrading.html",
            "date": " • Jan 5, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 3 Notes",
            "content": "1-2 . Variables . Variables are containers that hold a certain value/ data | there are different datatypes that a variable can store string (text/ letters) | int (number) | boolean (true false) | . | to assign a value to a variable, you use an assignment operator which is (=) -&gt; in pseudocode | . | variables should align with the data that it stores | . name = &quot;claire&quot; # can print just the variable instead of the whole name print(c) # this datatype is string so you need &quot;&quot; . claire . a = 1 # ints don&#39;t need &quot;&quot; print(a) . 1 . Answer = True print(a) . True . Strings and Lists . strings can be a series of words or numbers (including phone numbers) | lists store a series of variables, words, or numbers | syntax: square brakets | easier than assigning variable to each value | . name1 = &quot;claire&quot; name2 = &quot;claire&quot; name3 = &quot;grace&quot; name4 = &quot;annika&quot; print(name1, name2, name3, name4) # yes names = [&quot;claire&quot;, &quot;claire&quot;, &quot;grace&quot;, &quot;annika&quot;] print(names) . claire claire grace annika [&#39;claire&#39;, &#39;claire&#39;, &#39;grace&#39;, &#39;annika&#39;] . 3-4 . Algorithms . set of instructions to do certain tasks | parts of an algorithm sequence (order) | selection (decision dependant on condition) | iteration (loop until condition is met) | . | . Sequence . step 1 | step 2 | step 3 ##### Selection | if this is right, then do this | otherwise, do that ##### Iteration | repeat this step until you get this | . Arithmetic Operators . add | subtract | multiply | divide | mod (remainder) | . Answer = 1 + 1 print(Answer) . 2 . Answer = 1 - 1 print(Answer) . 0 . Answer = 1 * 1 print(Answer) . 1 . Answer = 1 / 1 print(Answer) . 1.0 . Answer = 1 % 1 print(Answer) # 1/1 has no remainder . 0 . Strings . len (string) | concat (str1, str2) | substring (str1, str2, length) | . len(&quot;claire&quot;) # print the number of letters . 6 . string = &quot;ClaireChen&quot; print(string[2:6]) # prints 2nd to 6th letter . aire . 5-7 . Boolean (true false) | rational operators equal to | greater than | less than | . | logical operators not (opposite) | and (if both apply) | or (if either apply) | . | . isRaining = False # if it is not raining result = not(isRaining) # the result is the opposite of raining (is not raining) print(result) . True . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;passed&quot;) . passed . flower = &quot;red&quot; if flower == &quot;red&quot; or &quot;green&quot;: print(&quot;red or green flower&quot;) # either red or green . red or green flower . Conditionals . if | then | else if/ elif | this is selection | . flower = 3 if flower == 1: print(&quot;flower&quot;) elif flower &gt;= 1: print(&quot;bouquet&quot;) . bouquet . Nested Conditionals . conditionals within conditionals | . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) # first conditional if reply1 == &quot;yes&quot;: # within the condition yes, you can enter your fav character print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) # if you enter Emily, it prints yay, othewise it prints oh if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) # from the first yes or no conditional, if you dont say yes, it prints you should else: print(&quot;you should&quot;) . Have you watched criminal minds? Who&#39;s your favorite character yay . 8-10 . Iteration: repeats a specified number of times or until a given condition is met . | Iteration Statements: repeats zero or more times, until a stopping condition is met . | Traversing Lists: all elements in the list are accessed (can be partial or complete) | . i = 0 # starting from 0, if from one it would print 4 times while (i &lt; 5): # print repeat 5 times print(&quot;repeat&quot;) i = i + 1 . repeat repeat repeat repeat repeat . for i in range(1,11): # start from 1 up until 11, kind of like intervals in math print(i) . 1 2 3 4 5 6 7 8 9 10 . difference between for and while loops . for loop is used when the number of iterations is known while loop is repeated until the statement in the program is proved wrong . list recap . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | . 12-13 . Procedures: basically same as function | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | . x = 5 y = 3 # kind of states the variables being used in the function def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . how to call a function . nameFunction(parameters) | . num = 5 # the function math is being called # the parameter is x def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . the return statemnt . A return statement ends the execution of a function, and returns control to the calling function | . # called function named divide # parameters are num1 and num2 def divide(num1,num2): x = num1/num2 return x . Vocab . Modularity - breaking a complex program into smaller, independent parts (modules) that can be used and reused in different parts of the program | Abstraction - hiding the details of how a particular code or system works and exposing only the essential features or functions (make it look clean) | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency (bad) | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . # this function squares numbers to avoid duplicates def square(a): return a * a # this function returns the square root of the sum of the two squared legs to find the hypotenuse def hypotenuse_abstracted(leg1, leg2): leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) . 14-15 . Libraries . A library has functions that can later be accessed in new programs | A library is a collection of code from another source that can be used to add functionality to a program save time and effort in the development process | &quot; .&quot; tells the program to look for the library and use its code | . | . import math x = int(input()) math.sqrt(x) . 3.0 . Random . randomly generates a number between a set of two given numbers | have to import the library random | . import random answer1 = random.randint(0,3) print(answer1) . 1 . random has a lot of different methods like . - seed() | Initialize the random number generator - getstate() | Returns the current internal state of the random number generator - setstate() | Restores the internal state of the random number generator - getrandbits() | Returns a number representing the random bits - randrange() | Returns a random number between the given range - randint() | Returns a random number between the given range . 16 . Simmulation . def: a virtual experiment or an immitation of a process | ex. testing the safety of a car or a game | . Experiment . a process done to make a discovery, test a hypothesis, or demonstrate a known fact | . simulations can be safer, cheaper, and more efficient, but also less accurate | simulations aren&#39;t always the same | . 17-18 . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . Iteration . The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. .",
            "url": "https://clairechen3.github.io/clairerepos/Notes3",
            "relUrl": "/Notes3",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "3.17-3.18 Hacks",
            "content": "Hack 1 . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(int(i)) else: i = (i / 2) list_.append(int(i)) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39; + &quot; n&quot;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;Sequence: &#39;) print(*l, sep=&quot; &quot;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Hack 2 . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . a = 1 b = 2 c = 3 print(a) print(b) print(c) . 1 2 3 . a = [1, 2, 3] print(a) . [1, 2, 3] . this one is more efficient because it uses a list instead of three seperate variables with three values . tasks = [&quot;have a snack&quot;, &quot;homework&quot;, &quot;gym&quot;, &quot;eat&quot;, &quot;shower&quot;, &quot;sleep&quot;] # use of list for efficiency def complete_tasks(tasks): for task in tasks: if task == &quot;have a sanck&quot;: print(&quot;slay&quot;) elif task == &quot;homework&quot;: print(&quot;do not disturb&quot;) elif task == &quot;gym&quot;: print(&quot;do not distub&quot;) elif task == &quot;eat&quot;: print(&quot;slay&quot;) elif task == &quot;shower&quot;: print(&quot;good job&quot;) elif task == &quot;sleep&quot;: print(&quot;do not disturb&quot;) complete_tasks(tasks) . do not disturb do not distub slay good job do not disturb .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/14/317-318.html",
            "relUrl": "/unit%203%20lessons/2022/12/14/317-318.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Panel Notes Extra Credit",
            "content": "Kathyleen Beveridge . born in vietnam, moved to bay area, went to Santa Clara University, studied abroad in Spain, moved to San Diego | started in financial banking and moved to hightech investment, retirment planning | . | places she&#39;s worked at hugo packard | qualcomm | HP | Thermofisher Scientific common goal to improve the world using tech | . | financial banking is 1 on 1, can only help one person at a time | However, high tech can change billions of people at one point qualcomm&#39;s chips were used by half the world | . | senior director of marketing and global sales. does this probduct make sense for this market | commercialize product to bring to the market | worked with scrum masters to commercialize their tech products | bring to the market and make an impact on this world | engineers and programmers turn ideas into reality and marketing helps commercialize and bring | . | . Kris Porter . DevOps engineer doesn&#39;t code all day | . | Enjoyed stem in highschool | went to UCLA | his first CS class was in University and failed it | but he still had a tech career later on | he worked on the networked infomechanical systems | learned linux operating system fixed computers installed routers | works on deploy softwares on to internet (DevOps) prevent hacking | protect emails (spam) | worked on server | autimation, data analytics | . | worked on streaming media infrastructure (olympics) | works at twitter home timeline | . | continuous learning CCNA training | machine learning | python | . | . More Notes . agile methodology different companies have their own method of agile | good skillset to have | some things | . | when companies shuffle, start looking for a new job:) | data scientist join fragnant data bases | predict where customer demand is | ex. predict harvest for wine companies | . | most important skill in tech industry continuous learning | learning how to learn (programming language) | each company has a diffeent way of doing things (be adaptive) | dont be too concerned about things you see on the news | you can still get in to a tech career with a non-tech backgroung | listen to requirements and translates it into how technology solves the requirements | speak tech terms in normal terms | . | biggest challenge in tech and how to overcome be adaptive to big changes | interview (series of timed random tests) | . | coding teaches you a way of thinking critical thinking | disecting a problem | problem solving and walking people through your process clearly | . | . Reflection . I am interested in doing something in the business marketing field, similar to Kathyleen and I thought it was really nice how she was able to use her high tech background to help her get to such a high position in marketing. I also really like how Kris shared his experience with failing coding and not really taking any coding classes in college, but still being able to work hard and get into the tech field .",
            "url": "https://clairechen3.github.io/clairerepos/2022/12/13/PanelNotes.html",
            "relUrl": "/2022/12/13/PanelNotes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "3.16 Hacks",
            "content": "Hack #1 . Create an idea for a simulation and describe it (you don’t actually have to code it just think about/answer the guiding questions). | . A simulation that allows people to try on clothes based on their clothing size and body measurements virtually when online shopping . What makes it a simulation? . - people don&#39;t have to go through the pain of going in stores and trying on clothes to see if it fits them, instead, they can just go online, put in their measurements and the simulation will tell you if you will fit the piece of clothing . What are it&#8217;s advantages and disadvantages? . - you don&#39;t have to leave your house to by clothes that fit! . In your opinion, would an experiment be better in this situation? . - It honestly depends on the person, but for me personally, I would prefer a simulation because shopping and trying on clothes in store stresses and grosses me out so for people like me, a clothing try on simulation could be very helpful . Hack #2 . Screenshot for quiz score: . Hack #3 . Describe the rolling dice simulation (answer guiding questions) how this simulation works is by asking for how many die you want to roll first and then giving you a random output from 1 through 6. The purpose of this game is to simulate rolling as many die as you want! I you wanted to roll 50 die, it might be a little hard to find that many die, so a simulation would be better | . Hack #4 . Add a feature onto the rolling dice simulation above ex: a 14-sided dice or expand the purpose of the simulation (hint: use conditionals to make dice part of a game/real life situation) | . | . def parse_input(input_string): if input_string.strip() in {&quot;1&quot;, &quot;2&quot;, &quot;3&quot;,&quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;}: return int(input_string) else: print(&quot;Please enter a number from 1 to 10.&quot;) raise SystemExit(1) import random def roll_dice(num_dice): roll_results = [] for _ in range(num_dice): roll = random.randint(1, 10) roll_results.append(roll) return roll_results num_dice_input = input(&quot;How many dice do you want to roll? [1-10] &quot;) num_dice = parse_input(num_dice_input) roll_results = roll_dice(num_dice) print(&quot;you rolled:&quot;, roll_results) . you rolled: [8, 7, 4, 8, 5, 10, 7, 10, 3] . Extra Credit . simulating picking petals off of flowers, good it you don&#39;t have a flower on hand:) . numPetals = int(input(&quot;number of petals&quot;)) while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;he loves me&quot;) if numPetals % 2 == 1: print(&quot;he loves me not&quot;) . 9 he loves me not 8 he loves me 7 he loves me not 6 he loves me 5 he loves me not 4 he loves me 3 he loves me not 2 he loves me 1 he loves me not 0 No More Petals he loves me .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/13/316.html",
            "relUrl": "/unit%203%20lessons/2022/12/13/316.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "3.14-3.15 Hacks",
            "content": "Hack 1 . Write a program that uses a library/libraries in any sort of manner. | Explain your work/code | . import math # math is a library x = int(input()) # set input which is a number as the value of x math.sqrt(x) # take the square root of x . 4.0 . Hack 2 . Write a few lines of code that implements the import function . | Define what an import random function do . | List a few other things that we can import other than random . | . import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) . Tails . import math math.sqrt(81) . 9.0 . an import random function generates a random number from a given range (kind of like an interval in calc) . some other things we can import are math to do math calculations (ex. square root) and also numpy to do calculus (ex. derivatives) . Hack 3 . For your hacks you need to create a random number generator that will simulate this situation: | There is a spinner divided into eight equal parts. 3 parts of the spinner are green, two parts are blue, one part is purple, one part is red, and one part is orange. How can you simulate this situation using a random number generator. . | Also answer this question: What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? . | . import random spin = random.randint(1,8) if spin &gt;=3: print(&quot;green&quot;) elif spin == 4 or 5: print(&quot;blue&quot;) elif spin == 6: print(&quot;purple&quot;) elif spin == 7: print(&quot;red&quot;) elif spin == 8: print(&quot;orange&quot;) . green . What numbers can be outputted from RANDOM(12,20) and what numbers are excluded? any number from 12 to 20 including 12 and 20 any number that is less than 12 and greater than 20 is excluded .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/12/314-315.html",
            "relUrl": "/unit%203%20lessons/2022/12/12/314-315.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "3.8-3.10 Hacks",
            "content": "Hack 1 . Iteration: Part of an Algorithm that repeats itself until a certain condition is met . Start | the number of petals on a flower is 8 | pick off one petal, and number of petals goes down by one | How many petals are left? | repeat step three until number of petals is zero | Finish | numPetals = 8 while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;I am smart&quot;) if numPetals % 2 == 1: print(&quot;I am dumb&quot;) . 7 I am dumb 6 I am smart 5 I am dumb 4 I am smart 3 I am dumb 2 I am smart 1 I am dumb 0 No More Petals I am smart . Iteration Statement: loop repeats zero or more times, until disturbed (loop is stopped) . i=3 while i&lt;=81: print(i) i=i+13 . 3 16 29 42 55 68 81 . Hack 2 . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;] for i in colors: if i == &quot;green&quot;: break print(i) # it will stop printing after yellow, prints until green . red orange yellow . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] least = min(nums) # minimum print(min(nums)) # print minimum for i in nums: # loop to check if there are any smaller numbers if i &lt; (min(nums)): #if there are any numbers that are even smaller than the one before, it will print the new one, but there isn&#39;t. print(i) . 38 . Reference sheet notes (4) . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | .",
            "url": "https://clairechen3.github.io/clairerepos/hacks810",
            "relUrl": "/hacks810",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 3 Vocab",
            "content": "Unit 2&#8230; Binary/Data Terms . Bits, Bytes, Hexadecimal / Nibbles binary digit that is the smallest increment of data on a computer ex. 0 and 1 | . | a byte is 8 bits ex. 12,345,678 | . | Hexadecimal is a base/positional number system used in mathematics and computer science (base 16 numbering system) | . | a nibble is 4 bits | . | Binary Numbers: Unsigned Integer, Signed Integer, Floating Point a binary digit, or bit, is the smallest unit of data unsigned: integers that don&#39;t have a sign associated with them ex. 1, 2 | . | signed: A signed integer is a 32-bit datum that encodes an integer in the range [-2147483648 to 2147483647] -100, 80 | . | Floating point: a positive or negative whole number with a decimal point ex. 5.5 | . | . | . | Binary Data Abstractions: Boolean, ASCII, Unicode, RGB Boolean: datatype that does true or false | ASCII: a character encoding scheme in which each character is represented by a 7-bit (originally) or 8-bit binary sequence | . | Unicode: 16-bit character set which describes all of the keyboard characters more than ASCII | ex. emojis | . | RGB: a problem solving approach (algorithm) to find a satisfactory solution where finding an optimal or exact solution is impractical or impossible example. | . | . | . . Data Compression: Lossy, Lossless Lossy: data encoding and compression technique that deliberately discards some data in the compression process | Lossless: data compression algorithm that allows the original data to be perfectly reconstructed from the compressed data | . | . x = True y = False . Unit 3&#8230; Algorithm/Programming Terms . Variables, Data Types, Assignment Operators . Variables: a value that can change, depending on conditions or on information passed to the program | Data Types: String (or str or text) - combination of any characters | Character (or char) - single letters | Integer (or int) - whole numbers | Float (or Real) - numbers that contain decimal points, or for fractions. | Boolean (or bool) - data is restricted to True/False or yes/no options | . | Assignment Operators: operator used to assign a new value to a variable ex. =, +=, -= | . | . | Managing Complexity with Variables: Lists, 2D Lists, Dictionaries, Class . Lists: an abstract data type that represents a finite number of ordered values, where the same value may occur more than once. | 2D lists: a two-dimensional array can hold more than one set of data | Dictionaries: an abstract data type that defines an unordered collection of data as a set of key-value pairs | Class: written in a defined structure to create an object. | . | Algorithms, Sequence, Selection, Iteration . Algorithms: a list set of instructions, used to solve problems or perform tasks. Sequence: algorithms do tasks in the order of specification. | Selection: helps choose two different outcomes based off a decision. | Iteration: if a condition is true, then the code can repeat. | . | . | Expressions, Comparison Operators, Booleans Expressions and Selection, Booleans - - - Expressions and Iteration, Truth Tables . Expressions: combination of values and functions that are combined and interpreted to create a new value. x + y Addition | x - y Subtraction | x * y Multiplication | x / y Division x // y Quotient | . | x % y Remainder | x ** y Exponentiation | . | Comparison Operators: compares two values against one another. a = b equal to | a &gt; b greater than | a &lt; b less than | a &gt;= b greater than or equal to | a &lt;= b less than or equal to | a != b not equal to | . | Boolean Expressions: if a condition is true or false, there is a differnet outcome and if a condition is true, the code repeats an earlier step | Truth Table: have two values 0 = off, false | 1 = on, true | Examples 0 and 0 = false. And operator means both needs to be true. | 0 or 1 = true. Either or. | Use this in conditionals (selection) | XOR = exclusive or. | Or = similar to true or false ex. A is true, B is false | . | . | . | . | . | Characters, Strings, Length, Concatenation, Upper, Lower, Traversing Strings . Characters: display unit of information equivalent to one alphabetic letter or symbol ex. a, 8, # | . | Strings: ordered sequences of characters | Length: the number of symbols output. | Concatenation: String concatenation is combining 2 or more strings to make a new strings in order to create a new string concat() in pseudocode and varys from language to language can be used to combine to strings such as concat(&quot;cookie&quot;,&quot;monster&quot;) returns cookiemonster | . | Upper: used to check if the argument contains any uppercase characters returns &quot;True&quot; if all characters in the string are uppercase, Otherwise, It returns &quot;False&quot; | . | Lower: returns the lowercase string from the given string | Traversing Strings: the process of going through a String one character at a time, often using loops | . | Python If, Elif, Else conditionals; Nested Selection Statements If: statement executes a piece of code when one statement is false and the following statement is true Elif: first if statement isn&#39;t true, but want to check for another condition | Else: executes if &quot;if&quot; isn&#39;t true | Nested Conditionals: when more than one decision must be made before the appropriate action can be taken | . | . | Python For, While loops with Range, with List For: Process stops if next element meets statement | While: Process is repeated until statement is met | While with range: | While with list: | . | Combining loops with conditionals to Break, Continue | Procedural Abstraction, Python Def procedures, Parameters, Return Values python def procedures: Defines an abstracted function | parameters: A numerical or other measurable factor forming one of a set that defines a system or sets the conditions of its operation. | return values: The result of a function returned to the caller | . | . x = 3 # x would be the variable # Datatypes str = &quot;Claire&quot; int = 10 bool = True char = &quot;a&quot; Real = 4.1222222 # assignment operator is = # List numbers = [1, 2, 3, 4] # 2D List rows, cols = (5, 5) # 5 rows and 5 columns arr = [[0]*cols]*rows for row in arr: print(row) # Dictionaries import random # random is the dictionary (outside source) diceRoll = random.randint(1,6) # random number from 1 to 6 print(diceRoll) # Class class Person: def __init__(self, name, age): self.name = name self.age = age p1 = Person(&quot;Claire&quot;, 16) print(p1.name) print(p1.age) # Algorithm: sequence, selction, and iteration temp = 70 if temp &lt; 50: print(&quot;stay inside&quot;) else: print(&quot;go outside&quot;) # selection using conditionals petals = 8 while (petals &gt; 0): print(petals) petals -= 1 if petals == 0: print(&quot;no more petals&quot;) # iteration using while loop # Expression a = 1 b = 2 c = 3 result = (a*b)/c print(result) # Comparison Operators 1 != 2 # 1 is not equal to 2, will output true 3 &gt;=4 # 3 is greater than or equal to 4, will output false # String print(&quot;Hello Everyone&quot;) # Length length = len(&quot;Hello Everyone&quot;) print(length) # space counts as a character # Concantation s1 = &#39;Hello&#39; s2 = &#39;Everyone&#39; s3 = s1 + s2 print(s3) # Upper txt = &quot;Hello Everyone&quot; x = txt.upper() print(x) # Lower txt = &quot;HELLO EVERYONE&quot; x = txt.lower() print(x) # Tranversing String string_name = &quot;hello everyone&quot; # Iterate over the string for element in string_name: print(element, end=&#39; &#39;) print(&quot; n&quot;) # Conditionals temp = 55 if temp &lt; 50: print(&quot;it&#39;s cold&quot;) elif temp &gt; 80: print(&quot;it&#39;s hot&quot;) else: print(&quot;good wheather&quot;) # Nested Conditionals print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) # For Loop members = [&quot;Annika&quot;, &quot;Claire&quot;, &quot;Grace&quot;] for x in members: if x == &quot;Claire&quot;: break print(x) # While Loop i = 1 while i &lt; 6: print(i) i += 1 # with range while i in range(1,2): print(&quot;Claire&quot;, i) # with list thislist = [&quot;Annika&quot;, &quot;Claire&quot;, &quot;Grace&quot;] for i in range(len(thislist)): print(thislist[i]) # Parameters import random flip = random.randint(1,2) if flip == 1: print(&quot;Heads&quot;) else: print(&quot;Tails&quot;) # Define and Return Procedures # goal (x+1)(x-2) x = int(input()) def add(a): return a + 1 def multiply(a): return a - 2 def equation(x): addX = add(x) multiplyY = multiply(x) return addX * multiplyY result = equation(x) print(result) . [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] [0, 0, 0, 0, 0] 4 Claire 16 go outside 8 7 6 5 4 3 2 1 no more petals 0.6666666666666666 Hello Everyone 14 HelloEveryone HELLO EVERYONE hello everyone h e l l o e v e r y o n e .",
            "url": "https://clairechen3.github.io/clairerepos/vocab3",
            "relUrl": "/vocab3",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 3 Notes",
            "content": "1-2 . Variables . Variables are containers that hold a certain value/ data | there are different datatypes that a variable can store string (text/ letters) | int (number) | boolean (true false) | . | to assign a value to a variable, you use an assignment operator which is (=) -&gt; in pseudocode | . | variables should align with the data that it stores | . name = &quot;claire&quot; # can print just the variable instead of the whole name print(c) # this datatype is string so you need &quot;&quot; . claire . a = 1 # ints don&#39;t need &quot;&quot; print(a) . 1 . Answer = True print(a) . True . Strings and Lists . strings can be a series of words or numbers (including phone numbers) | lists store a series of variables, words, or numbers | syntax: square brakets | easier than assigning variable to each value | . name1 = &quot;claire&quot; name2 = &quot;claire&quot; name3 = &quot;grace&quot; name4 = &quot;annika&quot; print(name1, name2, name3, name4) # yes names = [&quot;claire&quot;, &quot;claire&quot;, &quot;grace&quot;, &quot;annika&quot;] print(names) . claire claire grace annika [&#39;claire&#39;, &#39;claire&#39;, &#39;grace&#39;, &#39;annika&#39;] . 3-4 . Algorithms . set of instructions to do certain tasks | parts of an algorithm sequence (order) | selection (decision dependant on condition) | iteration (loop until condition is met) | . | . Sequence . step 1 | step 2 | step 3 ##### Selection | if this is right, then do this | otherwise, do that ##### Iteration | repeat this step until you get this | . Arithmetic Operators . add | subtract | multiply | divide | mod (remainder) | . Answer = 1 + 1 print(Answer) . 2 . Answer = 1 - 1 print(Answer) . 0 . Answer = 1 * 1 print(Answer) . 1 . Answer = 1 / 1 print(Answer) . 1.0 . Answer = 1 % 1 print(Answer) # 1/1 has no remainder . 0 . Strings . len (string) | concat (str1, str2) | substring (str1, str2, length) | . len(&quot;claire&quot;) # print the number of letters . 6 . string = &quot;ClaireChen&quot; print(string[2:6]) # prints 2nd to 6th letter . aire . 5-7 . Boolean (true false) | rational operators equal to | greater than | less than | . | logical operators not (opposite) | and (if both apply) | or (if either apply) | . | . isRaining = False # if it is not raining result = not(isRaining) # the result is the opposite of raining (is not raining) print(result) . True . grade = 95 if grade &gt; 70 and grade &lt;= 100: print(&quot;passed&quot;) . passed . flower = &quot;red&quot; if flower == &quot;red&quot; or &quot;green&quot;: print(&quot;red or green flower&quot;) # either red or green . red or green flower . Conditionals . if | then | else if/ elif | this is selection | . flower = 3 if flower == 1: print(&quot;flower&quot;) elif flower &gt;= 1: print(&quot;bouquet&quot;) . bouquet . Nested Conditionals . conditionals within conditionals | . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) # first conditional if reply1 == &quot;yes&quot;: # within the condition yes, you can enter your fav character print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) # if you enter Emily, it prints yay, othewise it prints oh if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) # from the first yes or no conditional, if you dont say yes, it prints you should else: print(&quot;you should&quot;) . Have you watched criminal minds? Who&#39;s your favorite character yay . 8-10 . Iteration: repeats a specified number of times or until a given condition is met . | Iteration Statements: repeats zero or more times, until a stopping condition is met . | Traversing Lists: all elements in the list are accessed (can be partial or complete) | . i = 0 # starting from 0, if from one it would print 4 times while (i &lt; 5): # print repeat 5 times print(&quot;repeat&quot;) i = i + 1 . repeat repeat repeat repeat repeat . for i in range(1,11): # start from 1 up until 11, kind of like intervals in math print(i) . 1 2 3 4 5 6 7 8 9 10 . difference between for and while loops . for loop is used when the number of iterations is known while loop is repeated until the statement in the program is proved wrong . list recap . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | . 12-13 . Procedures: basically same as function | Parameters are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values. | . x = 5 y = 3 # kind of states the variables being used in the function def multiply(x, y): product = x * y return product answer = multiply(x, y) print(&quot;The product of&quot;, x, &quot;times&quot;, y, &quot;is&quot;, answer) . how to call a function . nameFunction(parameters) | . num = 5 # the function math is being called # the parameter is x def math(x): op1 = x * 2 op2 = op1 - 9 return op2 . the return statemnt . A return statement ends the execution of a function, and returns control to the calling function | . # called function named divide # parameters are num1 and num2 def divide(num1,num2): x = num1/num2 return x . Vocab . Modularity - breaking a complex program into smaller, independent parts (modules) that can be used and reused in different parts of the program | Abstraction - hiding the details of how a particular code or system works and exposing only the essential features or functions (make it look clean) | Duplication - having multiple duplicate code blocks, often decreasing readability and efficiency (bad) | Logic - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code | . # this function squares numbers to avoid duplicates def square(a): return a * a # this function returns the square root of the sum of the two squared legs to find the hypotenuse def hypotenuse_abstracted(leg1, leg2): leg1_squared = square(leg1) leg2_squared = square(leg2) return math.sqrt(leg1_squared + leg2_squared) . 14-15 . Libraries . A library has functions that can later be accessed in new programs | A library is a collection of code from another source that can be used to add functionality to a program save time and effort in the development process | &quot; .&quot; tells the program to look for the library and use its code | . | . import math x = int(input()) math.sqrt(x) . 3.0 . Random . randomly generates a number between a set of two given numbers | have to import the library random | . import random answer1 = random.randint(0,3) print(answer1) . 1 . random has a lot of different methods like . - seed() | Initialize the random number generator - getstate() | Returns the current internal state of the random number generator - setstate() | Restores the internal state of the random number generator - getrandbits() | Returns a number representing the random bits - randrange() | Returns a random number between the given range - randint() | Returns a random number between the given range . 16 . Simmulation . def: a virtual experiment or an immitation of a process | ex. testing the safety of a car or a game | . Experiment . a process done to make a discovery, test a hypothesis, or demonstrate a known fact | . simulations can be safer, cheaper, and more efficient, but also less accurate | simulations aren&#39;t always the same | . 17-18 . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples: Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No. . Iteration . The action or a process of iterating or repeating: such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. .",
            "url": "https://clairechen3.github.io/clairerepos/Notes3",
            "relUrl": "/Notes3",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "3.12-3.13 Hacks",
            "content": "Topic 3.12 (3.A): . Define procedure and parameter in your own words Procedure: aka functions/methods are basically instructions that can store parameters and return values | Parameter: variables used in procedure | . | Paste a screenshot of completion of the quiz | . Define Return Values and Output Parameters in your own words Return Values: does a function and tells python to finish the procedure and return a certain value | Output Parameters: variables used in procedure (same thing as function parameters) | . | Code a procedure that finds the square root of any given number. (make sure to call and return the function) | import math # make function def root(x): result = math. sqrt(x) return result # get result and print result = root(9) print(result) . 3.0 . Topic 3.13 (3.B): . Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective it makes your code more concise, and able to do more things | . | Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.) goal: (x+1)(x-2) | I can use subprocedures for this to get the product of x+1 and x-2 becuse I need to do three calculations to get the result | inputed 9 | . | x = int(input()) def add(a): return a + 1 def multiply(a): return a - 2 def equation(x): addX = add(x) multiplyY = multiply(x) return addX * multiplyY result = equation(x) print(result) . 70 . Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?) | x = input() # this function takes a string as input and returns a list of words, where each word # is a separate element in the list def split_string(s): # use the split() method to split the string into a list of words words = s.split(&quot; &quot;) # initialize a new list to hold all non-empty strings new_words = [] for word in words: if word != &quot;&quot;: # add all non-empty substrings of `words` to `new_words` new_words.append(word) return words # this function takes a list of words as input and returns the number of words # that start with the given letter (case-insensitive) def count_words_starting_with_letter(words, letter): count = 0 # loop through the list of words and check if each word starts with the given letter for word in words: # use the lower() method to make the comparison case-insensitive if word.lower().startswith(letter): count += 1 return count # this function takes a string as input and returns the number of words that start with &#39;a&#39; def count_words_starting_with_x_in_string(s): # use the split_string() function to split the input string into a list of words words = split_string(s) # use the count_words_starting_with_letter() function to count the number of words # that start with &#39;a&#39; in the list of words # set the value of the variable x as the letter the function is looking for count = count_words_starting_with_letter(words, x) return count # example usage: s = &quot; hello claire &quot; x_count = count_words_starting_with_x_in_string(s) # change to be words starting with whatever letter is inputed print(&quot;Words starting with&quot;, x, &quot;:&quot;, x_count) . Words starting with h : 1 . Topic 3.13 (3.C): . Define procedure names and arguments in your own words. Procedure Names: the name of the function (useful so you can call the function later) | Arguments: provides information to a function from outside that function | . | Code some procedures that use arguments and parameters with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output) Add two numbers | Subtract two numbers | Multiply two numbers | Divide two numbers | . | 1st Number : 2nd Number: Result: . .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/12/08/312-313.html",
            "relUrl": "/unit%203%20lessons/2022/12/08/312-313.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "3.8-3.10 Hacks",
            "content": "Hack 1 . Iteration: Part of an Algorithm that repeats itself until a certain condition is met . Start | the number of petals on a flower is 8 | pick off one petal, and number of petals goes down by one | How many petals are left? | repeat step three until number of petals is zero | Finish | numPetals = 8 while (numPetals &gt; 0): numPetals -= 1 print(numPetals) if numPetals == 0: print(&quot;No More Petals&quot;) # EXTRA BONUS if numPetals % 2 == 0: print(&quot;I am smart&quot;) if numPetals % 2 == 1: print(&quot;I am dumb&quot;) . 7 I am dumb 6 I am smart 5 I am dumb 4 I am smart 3 I am dumb 2 I am smart 1 I am dumb 0 No More Petals I am smart . Iteration Statement: loop repeats zero or more times, until disturbed (loop is stopped) . i=3 while i&lt;=81: print(i) i=i+13 . 3 16 29 42 55 68 81 . Hack 2 . colors = [&quot;red&quot;, &quot;orange&quot;, &quot;yellow&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;purple&quot;] for i in colors: if i == &quot;green&quot;: break print(i) # it will stop printing after yellow, prints until green . red orange yellow . nums = [&#39;38&#39;, &#39;45&#39;, &#39;67&#39;, &#39;83&#39;, &#39;78&#39;] least = min(nums) # minimum print(min(nums)) # print minimum for i in nums: # loop to check if there are any smaller numbers if i &lt; (min(nums)): #if there are any numbers that are even smaller than the one before, it will print the new one, but there isn&#39;t. print(i) . 38 . Reference sheet notes (4) . Append adds something to the list (at the end of the list) | Insert adds something to the list (anywhere in the list) | Removes whatever is at the index you put | you can assign the values of a list to another list | .",
            "url": "https://clairechen3.github.io/clairerepos/hacks810",
            "relUrl": "/hacks810",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "3.5-3.7 Hacks",
            "content": "Hack 1 . Logical Operators . not Shows/does the opposite of the data | mostly used for true false | ex. if you assign red to false, and then you have a variablle called result that you assign the value not(red) to, then it will output true | code example: | . | . isRed = False green = not(isRed) print(green) . and evaluates two conditions together and if both conditions are met and only if both conditions are met, will the final result be shown | ex. if flower = red and flower = green print(&quot;christmas flower&quot;) the flower has to be both red and green for the algorithm to print chirstmas flower, if only red, christmas flower will not be printed | code example: | . | . flower = 50 if flower &gt;= 1 and flower &lt;= 100: print(&quot;bouquet&quot;) if flower &gt;= 100: print(&quot;garden&quot;) . or only one of the two conditons has to be met | ex. if temp &gt;=100 or temp &lt;= 20 print (&quot;stay home&quot;) | code example: | . | . temp = 101 if temp &gt;= 100 or temp &lt;= 20: print(&quot;stay home&quot;) . Hack 2 . Conditionals . evaluates actions in the program (true or false) . Selection: the result of this block of a selection depends on if a condition is true or false Algorithm: instructions/steps to accomplish a certain task, or solve a different problem Conditional Statement: executes certain statements depending on if it is true or false . Binary Conditional Logic . print(&quot;please enter a number&quot;) x = int(input()) if x % 2 == 0: # if x is divisible by 2 with no remainder print(x, &quot;is even&quot;) else: # if x is not divisible by 2 with no remainder print(x, &quot;is odd&quot;) . Nested statement 1 . print(&quot;are you happy?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;no&quot;: print(&quot;why be sad when you can be glad&quot;) if reply == &quot;yes&quot;: print(&quot;good for you&quot;) . Nested Statement 2 . print(&quot;what holiday do you celebrate?&quot;) reply = input(&quot;Christmas or Hanukkah&quot;) if reply == &quot;Hanukkah&quot;: print(&quot;Happy hanukkah!&quot;) elif reply == &quot;Christmas&quot;: print(&quot;Merry Chirstmas!&quot;) else: print(&quot;Happy Holidays!&quot;) . Nested Statement 3 . print(&quot;are you a swiftie?&quot;) reply = input(&quot;yes or no&quot;) if reply == &quot;yes&quot;: print(&quot;slay!&quot;) else: print(&quot;oh.&quot;) . display 4 statements . print(&quot;Have you watched criminal minds?&quot;) reply1 = input(&quot;yes or no?&quot;) if reply1 == &quot;yes&quot;: print(&quot;Who&#39;s your favorite character&quot;) reply2 = input(&quot;favorite character&quot;) if reply2 == &quot;Emily&quot;: print(&quot;yay&quot;) else: print(&quot;oh&quot;) else: print(&quot;you should&quot;) . Stem or no stem? . print(&quot;are you interested in stem?&quot;) reply1 = input(&quot;yes or no&quot;) if reply1 == &quot;yes&quot;: list1 = [&quot;APCSP&quot;, &quot;AP Biology&quot;, &quot;AP Statistics&quot;] print(&quot;you should take&quot;, list1) else: list2 = [&quot;AP Human Geography&quot;, &quot;AP World&quot;, &quot;AP English Language&quot;] print(&quot;you should take&quot;, list2) .",
            "url": "https://clairechen3.github.io/clairerepos/hacks57",
            "relUrl": "/hacks57",
            "date": " • Dec 4, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/11/30/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/11/30/ErrorPractice.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "3.3-3.4 Hacks",
            "content": "Hack 1 . Sequencing: . set item to number to search for | get next number in the list | if number = item, display &quot;item found&quot; | if there are more numbers in the list, go back to step 2 | display &quot;item not found&quot; Selection: | if number = item, display &quot;item found&quot; Iteration: | if there are more numbers in the list, go back to step 2 | Hack 2 . num1 = 5 num2 = num1 3 num3 = num2 / num1 (9 % 2) 4 result = (num3 % num1 + num2) % num3 3 / 5 . 5 | 5*3= 15 | 15/5=3 1=34=12 | 12/5 +15=17 % 12 = 5*3 = 15/5 = 3 | Crossword . 1 down - iteration 2 down - selection 3 across - sequence .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/11/29/33-34.html",
            "relUrl": "/unit%203%20lessons/2022/11/29/33-34.html",
            "date": " • Nov 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 3.17-3.18 Group Lesson Period 4",
            "content": "Hailstone numbers . def collatz(i): while i &gt; 1: print(i, end=&#39; &#39;) if (i % 2): # i is odd i = 3*i + 1 else: # i is even i = i//2 print(1, end=&#39;&#39;) i = int(input(&#39;Enter i: &#39;)) print(&#39;Sequence: &#39;, end=&#39;&#39;) collatz(i) . Sequence: 34 17 52 26 13 40 20 10 5 16 8 4 2 1 . Number of iterations . def collatz(i): while i != 1: if i % 2 &gt; 0: i =((3 * i) + 1) list_.append(i) else: i = (i / 2) list_.append(i) return list_ print(&#39;Please enter a number: &#39;, end=&#39;&#39;) while True: try: i = int(input()) list_ = [i] break except ValueError: print(&#39;Invaid selection, try again: &#39;, end=&#39;&#39;) l = collatz(i) print(&#39;&#39;) print(&#39;Number of iterations:&#39;, len(l) - 1) . Please enter a number: Number of iterations: 13 . Vocab . Collatz . The Collatz conjecture is one of the most famous unsolved problems in mathematics. The conjecture asks whether repeating two simple arithmetic operations will eventually transform every positive integer into 1. . Hailstone numbers . The sequence of integers generated by Collatz conjecture are called Hailstone Numbers. Examples:Input : N = 7 Output : Hailstone Numbers: 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1 No.&gt; ### Iteration The action or a process of iterating or repeating:such as. : a procedure in which repetition of a sequence of operations yields results successively closer to a desired result. . Undecidable problems . An undecidable problem is one that should give a &quot;yes&quot; or &quot;no&quot; answer, but yet no algorithm exists that can answer correctly on all inputs. . Unsolvable problems . An unsolvable problem is one for which no algorithm can ever be written to find the solution. . Additional information . A problem posed by L. Collatz in 1937, also called the 3x+1 mapping, 3n+1 problem, Hasse&#39;s algorithm, Kakutani&#39;s problem, Syracuse algorithm, Syracuse problem, Thwaites conjecture, and Ulam&#39;s problem (Lagarias 1985). Thwaites (1996) has offered a £1000 reward for resolving the conjecture. Let a_0 be an integer. Then one form of Collatz problem asks if iterating . always returns to 1 for positive a_0. (If negative numbers are included, there are four known cycles (excluding the trivial 0 cycle): (4, 2, 1), (-2, -1), (-5, -14, -7, -20, -10), and (-17, -50, -25, -74, -37, -110, -55, -164, -82, -41, -122, -61, -182, -91, -272, -136, -68, -34).) . The members of the sequence produced by the Collatz are sometimes known as hailstone numbers. Conway proved that the original Collatz problem has no nontrivial cycles of length &lt;400. Lagarias (1985) showed that there are no nontrivial cycles with length &lt;275000. Conway (1972) also proved that Collatz-type problems can be formally undecidable. Kurtz and Simon (2007) proved that a natural generalization of the Collatz problem is undecidable; unfortunately, this proof cannot be applied to the original Collatz problem. . The Collatz algorithm has been tested and found to always reach 1 for all numbers &lt;=19·2^(58) approx 5.48×10^(18) (Oliveira e Silva 2008), improving the earlier results of 10^(15) (Vardi 1991, p. 129) and 5.6×10^(13) (Leavens and Vermeulen 1992). Because of the difficulty in solving this problem, Erdős commented that &quot;mathematics is not yet ready for such problems&quot; (Lagarias 1985). . The numbers of steps required for the algorithm to reach 1 for a_0=1, 2, ... are 0, 1, 7, 2, 5, 8, 16, 3, 19, 6, 14, 9, 9, 17, 17, 4, 12, 20, 20, 7, ... (OEIS A006577; illustrated above). Of these, the numbers of tripling steps are 0, 0, 2, 0, 1, 2, 5, 0, 6, ... (OEIS A006667), and the number of halving steps are 0, 1, 5, 2, 4, 6, 11, 3, 13, ... (OEIS A006666). The smallest starting values of a_0 that yields a Collatz sequence containing n=1, 2, ... are 1, 2, 3, 3, 3, 6, 7, 3, 9, 3, 7, 12, 7, 9, 15, 3, 7, 18, 19, ... (OEIS A070167). . The Collatz problem can be implemented as an 8-register machine (Wolfram 2002, p. 100), quasi-cellular automaton (Cloney et al. 1987, Bruschi 2005), or 6-color one-dimensional quasi-cellular automaton with local rules but which wraps first and last digits around (Zeleny). In general, the difficulty in constructing true local-rule cellular automata arises from the necessity of a carry operation when multiplying by 3 which, in the worst case, can extend the entire length of the base-b representation of digits (and thus require propagating information at faster than the CA&#39;s speed of light). . More information . Hacks/Assignment . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | . Unit 3, Section 17: Algorithm Efficiency - Kush &amp; Yasha . What is Algorithm Efficiency? . Yasha - Algorithmic efficiency is an aspect of algorithmic programming that measures the number of steps needed to solve a problem. For instance, If I wanted to create a sorting algorithm that sorts numbers the numbers [2,4,5,1,3]from least to greatest, rather than having an algorithm that compares itself to the next number and swaps accordingly it would be more efficient if you had a program that scans through all the numbers and checks whether a number is smaller or bigger than the rest than and sorts accordingly. Both of the algorithms had the same objective, but one runs more efficiently than the other. . Here is an example of an inefficient algorithm: . def inefficientWay(numbers): # Then it loops over the numbers for i in range(len(numbers)): # Now it finds the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # Then it swaps the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(inefficientWay([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - This algorithm is inefficent because it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. This is an inefficient way to sort a list. . Kush - Here is an efficent way to sort a list: . def efficient_sort(numbers): # loop over the numbers for i in range(len(numbers)): # find the minimum number in the unsorted part of the list min_index = i for j in range(i+1, len(numbers)): if numbers[j] &lt; numbers[min_index]: min_index = j # swap the minimum number with the first unsorted number numbers[i], numbers[min_index] = numbers[min_index], numbers[i] # return the sorted list return numbers # test the algorithm print(efficient_sort([2, 4, 5, 1, 3])) # should print [1, 2, 3, 4, 5] . [1, 2, 3, 4, 5] . Yasha - The difference in this algorithm is that it uses a loop to find the minimum number in the unsorted part of the list and then swaps it with the first unsorted number. . How can you use algorithms to better your life: Mini activity . Yasha - Just for a second, think about all the tasks in your life that would work so much better automated. The sky&#39;s the limit. For an activity, write down or take a mental note of a task that you encounter in your day to day life, and think of ways where you can automate that task. An example of this would be me creating an algorithm for my morning routine. . tasks = [&quot;wake up&quot;, &quot;eat breakfast&quot;, &quot;brush teeth&quot;, &quot;go to school&quot;] def complete_tasks(tasks): for task in tasks: # code to complete each task goes here if task == &quot;wake up&quot;: print(&quot;Waking up now!&quot;) elif task == &quot;eat breakfast&quot;: print(&quot;Eating breakfast now!&quot;) elif task == &quot;go to school&quot;: print(&quot;Going to school now!&quot;) # and so on for each task in the list # call the function to complete the tasks complete_tasks(tasks) . Waking up now! Eating breakfast now! Going to school now! . Taking a heuristic approach to problems P1 . Kush - Sometimes when a problem has too many possibilities, a heuristic approach would be taken. let&#39;s use planes as an example. Imagine you were a musician on tour. You have shows in New Zealand, United States, Canada, and Russia. Well, what would be the shortest flight route so you can arrive at those destinations as fast as possible? You start in the United States. . Taking a heuristic approach to problems P2 . Kush - Well, since there are multiple possibilities, I chose to pick the countries closest to each other. The reason I chose this algorithm in particular is that it made the most sense. I had to start at United States, but then I went on to Canada, Russia, New Zealand, and then back to the United States. . Visual Representation . Hacks/assignment for Algorithm Efficiency . Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | . Hacks Overview . Take the two codes above and combine them so one imput gives the output that contains both the hailstone numbers and the number of iterations it takes i = 1. (.25) . (Extra credit: If your code is more efficient it will recieve a higher grade.) . | Code 2 algorithms: (.25) . The first Algorithm should be efficient while the second should be innefficient. Then explain what distinguishes the efficient from the non-efficient one. (In your own words) . | Explain algorithm efficiency in your own words (.25) . | Code an efficient program that shows your daily tasks or schedule. (We have an example shown in our lesson) (.25) | .",
            "url": "https://clairechen3.github.io/clairerepos/2022/11/28/Quinn&Group.html",
            "relUrl": "/2022/11/28/Quinn&Group.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "3.1-3.2 Hacks",
            "content": "simplified food list: lists are better because it makes your code sorter and more efficient . foods = [&#39;pizza, hotdog, sushi, strawberry, sandwich&#39;] print(foods) . [&#39;pizza, hotdog, sushi, strawberry, sandwich&#39;] . color1 = &quot;red&quot; color2 = &quot;orange&quot; color3 = &quot;yellow&quot; color4 = &quot;green&quot; color5 = &quot;blue&quot; color6 = &quot;indigo&quot; color7 = &quot;violet&quot; print(color1, color2, color3, color4, color5, color6, color7) color = [&#39;red, orange, yellow, green, blue, indigo, violet&#39;] print(color) . red orange yellow green blue indigo violet [&#39;red, orange, yellow, green, blue, indigo, violet&#39;] . num1=input(&quot;Input first number. &quot;) num2=input(&quot;Input second number. &quot;) num3=input(&quot;Input third number. &quot;) add=input(&quot;How much would you like to add to each number? &quot;) # Add code in the space below num1 = int(num1) num2 = int(num2) num3 = int(num3) numlist = [num1 , num2, num3] # The following is the code that adds the inputted addend to the other numbers. It is hidden from the user. for i in numlist: numlist[i -1] += int(add) print(numlist) . [2, 3, 4] . Create a list with indices | Index a part of the list that you created. | Try to index from the end ### index dog from front and end | . petsList = [&quot;cat&quot;, &quot;dog&quot;, &quot;fish&quot;, &quot;bird&quot;] print(petsList) print(petsList[1]) print(petsList[-3]) . [&#39;cat&#39;, &#39;dog&#39;, &#39;fish&#39;, &#39;bird&#39;] dog dog . What is a list? . A list of values or variables that can be assigned all at once | . What is an element . the things in a list | . What is an easy way to reference the elements in a list or string? . print(name of list) | . What is an example of a string? . hello | . Create an index of your favorite foods . favFood = [&quot;sushi&quot;, &quot;pasta&quot;, &quot;strawberries&quot;, &quot;tiramisu&quot;, &quot;potato&quot;] print(favFood) in1 = input(&quot;Input number&quot;) print(favFood[int(in1)-1]) . [&#39;sushi&#39;, &#39;pasta&#39;, &#39;strawberries&#39;, &#39;tiramisu&#39;, &#39;potato&#39;] sushi . In your own words, briefly explain by writing down what an assignment operator is . an operator that assigns values to variables | . In Collegeboard pseudocode, what symbol is used to assign values to variables? . -&gt; an arrow | . A variable, x, is initially given a value of 15. Later on, the value for x is changed to 22. If you print x, would the command display 15 or 22? . if you print x it would display 22 because code is read from top to bottom and meaning if the variable is reassigned later on in the code, the reassigned value will be the one that is displayed | . print(&quot;name:&quot;) name = input(&quot;what&#39;s your name?&quot;) print(&quot;my name is&quot;, name) print(&quot;age:&quot;) age = input(&quot;how old are you?&quot;) print(&quot;I am&quot;, age, &quot;years old&quot;) print(&quot;phone number:&quot;) phoneNumber = input(&quot;what&#39;s your phone number&quot;) print(&quot;my phone number is&quot;, phoneNumber) . name: my name is claire age: I am 16 years old phone number: my phone number is 8582394568 .",
            "url": "https://clairechen3.github.io/clairerepos/unit%203%20lessons/2022/11/28/31-32.html",
            "relUrl": "/unit%203%20lessons/2022/11/28/31-32.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Tri 2 Cumulative Notes",
            "content": "meta data . ex. name of a person | meta means: kind of, sort of, like | data about the data | front matter (title description) | . liquid code . in html | on csp exam all indices start with 1 | . pre processing step in actions before goes into browser to generate liquid to html code .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%2013/2022/11/17/CumulativeNotes.html",
            "relUrl": "/markdown/week%2013/2022/11/17/CumulativeNotes.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Algorithm College Board Notes",
            "content": "3.9 Video 1 . What I need to cover in this lesson: . Algorithms can be written in different ways and still do the same thing | However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | Some conditional statements can be written as equivalent boolean expressions | . something as minor as writing a &gt; instead of a &gt;= can change the result of an entire algorithm (differentiate 2 algorithms) create two algorithms that look similar but display different results for example | assign fixing one of the algorithms to have both results be the same for homework | . | if else conditionals can be replaced by boolean expression create an if else statement and two boolean expressions to go with it (one that has the same result as the if else statement and one that doesn&#39;t) | assigning blogging about which boolean expression can replace the if then statement and why | . | explain how being able to spot these differences in algorithms will be important to us assign blogging about how they will use knowledge about algorithms to work on team projects in the future | . | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%2013/2022/11/17/AlgorithmNotes.html",
            "relUrl": "/markdown/week%2013/2022/11/17/AlgorithmNotes.html",
            "date": " • Nov 17, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Algorithms",
            "content": "A little review on Algorithms: . what are the three components of an algorithm? . sel__ | seq__ | it___ | . Today we will be looking at algorithms from another standpoint. Q: How many ways are there to peel a banana? Is the result the same? . Main Idea 1: . Algorithms can be written in different ways and still do the same thing . However, Algorithms that look similar might not always have the same result | Different algorithms can be used to solve the same problem | . Examples! . The goal with the two algorithms below is to show &quot;Wow! Good job!&quot; when you get an A and show &quot;Nice!&quot; when you get a B or C (pass), if you don&#39;t pass (lower than 70) it will show &quot;Do Better&quot; . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) if 70 &lt;= grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? Nice! . yay! it worked! Lets look at the next one. Do you notice any differences? Do you think this algorithm will still achieve the same goal? If not, what is the flaw? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) if grade &gt;= 90: print(&quot;Wow! Good job!&quot;) elif 70 &lt; grade &lt; 90: print(&quot;Nice!&quot;) elif grade &lt; 70: print(&quot;Do Better&quot;) . What Grade Did You Get? . So, why is this important? Why are we even doing this? . when 2 algorithms look extremely similar, it is easy to assume they do the same thing. However, that is not the case and we have learn how to notice small differences in code and pretty much debug. - just know that codes that look similar don&#39;t always produce the same things:) . Real-life situation (Storytime) . Tommy and Billy are working on solving the same issue with an algorithm Tommy creates a functioning code and yells &quot;I did it!&quot; He looks over at his friend Billy which is having a bit of trouble and he offers help However, Billy&#39;s code looks basically the same! which confuses them Then they remeber that they were taught that algorithms that look similar don&#39;t always have the same results and they collaborate to do further investigation:) . Now, without running, investigate the algorithm below. This one looks different. Do you thing it will still achieve the same goal as above? . print(&quot;What Grade Did You Get?&quot;) grade = int(input(&quot;Enter Grade:&quot;)) A = grade &gt;= 90 B = 70 &lt;= grade &lt; 90 C = grade &lt; 70 if A: print(&quot;Wow! Good job!&quot;) elif B: print(&quot;Nice!&quot;) elif C: print(&quot;Do Better&quot;) . What Grade Did You Get? Do Better . Why is this important? When collaborating or working on group projects, two people might come up with two different ways to solve a problem, and that happens a lot. . know that same goal can be achieved in many ways (the possibilities are endless) | make notes in you code! (explain how it works to others or you future self) | . Hacks: . Make your own version of this! requirements: . main goal of algorithm | main/base algorithm (ideal algorithm) | an algorithm that visual looks like the first one but is flawed, has a different result, or both explain the flaw either in notes of your code or in a markdown | . | an algorithm that looks very different from first algorithm but has some result/ solves the same problem explanation/ comparison of this algorithm with the first one | . | . The Algorithms don&#39;t have to be super complicated! But it should be complex enough to show a good understanding of this lesson as well as previous ones . Scoring Rubric: . 0.05 for an interesting goal | 0.05 for a well completed main algorithm | 0.05 for algorithm that looks the same but is different | 0.05 for algorithm that looks different but is the same | 0.05 for explanation of both algorithms above | total: 0.25 | . Extra things to add to notes:) . why having this understanding of algorithms is important to you as a coder | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/11/15/Algorithm.html",
            "relUrl": "/markdown/week%208/2022/11/15/Algorithm.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Final Test Corrections",
            "content": ". needs location to find restaurants near them, only Alejandra’s contact list is needed because shes the one hosting it. | . . until count is greater than max, that means it will print all numbers less than or equal to max | . . The Internet is an interconnected network of networks, and the World Wide Web is an information system that is accessed via the Internet. | . . overflow error will occur because SUM of 14 and 15 is larger than the largest binary value that can be represented using 4 bits which is 1111 | . . 4 bits can be represented as 2^4=16, which means 4 bits can store 16 pieces of information, only 8 pieces of information has to be stored, so 4 bits is enough | . . first 4 is assigning variables, after those four lines, values are reassigned | p becomes 20, q becomes 30, s becomes 20, r becomes 20 | . . Since num1 is not less than num2, num3 becomes 4, | Since num2 is greater than or equal to num3, num1 becomes 8 | So, num1 + num2 + num3 = 8 + 4 + 4 =16 | . . The variables x and result are initialized to 0. Inside the loop, result is increased by x and x is increased by 1. The loop terminates when x exceeds 5. Therefore, result is assigned the sum of the integers from 0 to 5, or 15. | . . count1 adds 1 for each positive value and count2 adds 1 for every negative or 0 value | . . the first two lines are assigning the value true to “first” and the value false to “second”, the next two are reassigning values | “second” becomes true, “first” becomes true | . . similar to 46, the first three lines are assigning values to the variables, then for every next line, it is reassigning the values | so x becomes 50, y becomes 75, and z becomes 50. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/07/FinalTestCorrections.html",
            "relUrl": "/markdown/2022/11/07/FinalTestCorrections.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Night at the Museum",
            "content": ". my group and I working on finishing touches, organizing who is going to present what, and practicing presenting | looking at other group’s csp project, seeing what they did that we can implement in our own project. However, some groups including ours were having trouble with some parts of the project whether it be the API, connecting frontend and backend, etc, so it was good to know that other people are having trouble with the same things and that we have a lot of people to ask and help out when problem occur. I really liked this groups use of an API to potentially tell you what illness you have based on your symptoms. I could see this being really helpful especially after a worldwide pandemic | Lastly, we looked around the art department and visited ceramics and AP studio art. I loved seeing all the amazing creations that fellow Del Norte students have made and I was able to find some pieces that my friends in those classes made which was cool. I don’t have any pictures of ceramics, but there was a turtle pot that was really cool and detailed which I really liked. In AP studio art I also so a bunch of really amazing pieces using all types of mediums. But seeing the skill the AP studio art students have kind of discourages me from taking AP studio art, because I wanted to take it in my senior year, but I haven’t been practicing my art, and my skills are nowhere near as good as theirs. Overall, night at the museum was pretty fun, but kind of stressful. | Ideas for next time: Although games are really fun and can halp you destress, I think maybe next time I want to try something that can be used on the day-to-day and make life a little easier. An example would be the illness identifier that I mentioned above, an online journal entry, or a grade calculator. | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/11/04/NATMblog.html",
            "relUrl": "/markdown/2022/11/04/NATMblog.html",
            "date": " • Nov 4, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Identifying and Correcting Errors",
            "content": "alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) print(&quot;what letter do you want to check?&quot;) letter = input(&quot;Enter letter: &quot;) if letter == (&quot;a&quot;): print(&quot;1&quot;) if letter == (&quot;b&quot;): print(&quot;2&quot;) if letter == (&quot;c&quot;): print(&quot;3&quot;) if letter == (&quot;d&quot;): print(&quot;4&quot;) if letter == (&quot;e&quot;): print(&quot;5&quot;) if letter == (&quot;f&quot;): print(&quot;6&quot;) if letter == (&quot;g&quot;): print(&quot;7&quot;) if letter == (&quot;h&quot;): print(&quot;8&quot;) if letter == (&quot;i&quot;): print(&quot;9&quot;) if letter == (&quot;j&quot;): print(&quot;10&quot;) if letter == (&quot;k&quot;): print(&quot;11&quot;) if letter == (&quot;l&quot;): print(&quot;12&quot;) if letter == (&quot;m&quot;): print(&quot;13&quot;) if letter == (&quot;n&quot;): print(&quot;14&quot;) if letter == (&quot;o&quot;): print(&quot;15&quot;) if letter == (&quot;p&quot;): print(&quot;16&quot;) if letter == (&quot;q&quot;): print(&quot;17&quot;) if letter == (&quot;r&quot;): print(&quot;18&quot;) if letter == (&quot;s&quot;): print(&quot;19&quot;) if letter == (&quot;t&quot;): print(&quot;20&quot;) if letter == (&quot;u&quot;): print(&quot;21&quot;) if letter == (&quot;v&quot;): print(&quot;22&quot;) if letter == (&quot;w&quot;): print(&quot;23&quot;) if letter == (&quot;x&quot;): print(&quot;24&quot;) if letter == (&quot;y&quot;): print(&quot;25&quot;) if letter == (&quot;z&quot;): print(&quot;26&quot;) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] what letter do you want to check? 1 . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter a is the 1 letter in the alphabet . change str(i) to str(i+1) because a =0 . letter = input(&quot;What letter would you like to check?&quot;) count = 0 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count+1) + &quot; letter in the alphabet&quot;) count += 1 . The letter c is the 3 letter in the alphabet . remove count out of for loop . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed to i=1 because 1+2, +2, +2, etc will be odd . odds = [] i = 1 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [1, 3, 5, 7, 9] . changed i=0 to i=1 for same reason as above . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 != 0): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . changed evens to odds, replaced == with !=( equal with cannot equal) . numbers = [] newNumbers = [] i = 0 while i &lt;= 100: if i == 0: pass numbers.append(i) i += 1 for i in numbers: if numbers[i] == 0: pass elif numbers[i] % 5 == 0: newNumbers.append(numbers[i]) elif numbers[i] % 2 == 0: newNumbers.append(numbers[i]) print(newNumbers) . [2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98, 100] . added pass if i ==0, replaced if with elif (else), for when number isn&#39;t 0 . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99} total = 0 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times item = input(&quot;Please select an item from the menu&quot;) second = input(&quot;do you want another item&quot;) #code should add the price of the menu items selected by the user print (menu[item] ) print (check[second]) if second = yes print (menu[item]) if input = no . Input In [6] if second = yes ^ SyntaxError: invalid syntax .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/15/ErrorPractice.html",
            "relUrl": "/markdown/week%207/2022/10/15/ErrorPractice.html",
            "date": " • Oct 15, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "College Board Internet Notes",
            "content": "Video 1 . computers used to be really big but got progressively smarter | computers send and receive data | computers understand electrons represented by numbers &quot;talk number&quot; | we have to translate our information into numbers and packets | packets: small amount of data sent over a network packet includes source and destination | . | creation of computer systems computer systems are groups of computing devices and programs working together for a joint purpose | . | computer network is a group of computing devices that send and receive data | router helps with packet switching (guides message from sender to receiver) Packet: message that is broken up into packets and sent in any order | . | bandwidth: maximum amount of data that can be sent in an amount of time(bits per second) the more data the slower it might take to get from sender to receiver (like traffic) | . | . Video 2 . computer protocol (rules of the road) | computer protocol models OSI | TCP layers you have to go through to communicate (7 layers of protocol) | . | . | layer 1: Network Acess layer ex. wifi card | deliver packets from one network interface card (NIC) to another aka &quot;hop&quot; | . | layer 2: Internet Layer Data Transmission a packet contains data that is being transimitted and metadata(information for routing messages) | one device with a certain IP address is sending a message on on that path, they run into routers that help guide them to the IP address of the other device the message is trying to reach | . | layer 3: Transport Layer TCP slower but reliable | UDP faster but does not guarantee transfers | computer is sending IP addresses through bits | . | layer 4: Application Layer DNS (domain name service), human language to IP address | web servers are programs running on machines connected to internet | www (world wide web) is a network of linked programs and data running over the internet | . | http is a protocol used by world wide web | routes are flexible | world wide web is not the internet | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "relUrl": "/markdown/week%208/2022/10/14/Week8InternetNotes.html",
            "date": " • Oct 14, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Week 7 College Board Notes",
            "content": "programmers run into a lot of errors it is expected so we need to know how to solve | . | Types of errors: logic errors: mistake in algorithm that causes unexpected output | . | syntax errors: typo in code (doesn&#39;t follow rule in language) | forget to add (&quot;&quot;,:{}, etc) | . | run-time error makes a program fail while running | aka bug | runs initially, but can&#39;t complete process | ex. dividing by 0 | . | overflow error when program is required to calculate something that is outside of range of values. | . | . | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "relUrl": "/markdown/week%207/2022/10/07/Week7CBNotes.html",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Python RapidAPI",
            "content": "Python, RapidAPI Terms . APIs and tooling like Jupyter docs allows many opportunities in fields like Data Science. As more and more developers use APIs, they build standards in how you setup a client, send requests and receive information... . Covid19 RapidAPI Example . To begin the API journey. You need to find an API provider. . RapidAPI is a great option. You must setup and account, but there are many free options. | Goto this page for starters, the Corona virus World and India data- Under Code Snippets pick Python - Requests | . RapidAPI, you will select Python Requests type of code to work with you Notebook. . The url is the endpoint to which the API is directed | The headers is a dictionary data structure to send special messaging to the endpoint | The requests.request() python function is used to send a request and retrieve their responses | The response variable receives result of of the request in JSON text | . Next step, is to format the response according to your data science needs . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests url = &quot;https://google-translate1.p.rapidapi.com/language/translate/v2/detect&quot; payload = &quot;q=English%20is%20hard%2C%20but%20detectably%20so&quot; headers = { &quot;content-type&quot;: &quot;application/x-www-form-urlencoded&quot;, &quot;Accept-Encoding&quot;: &quot;application/gzip&quot;, &quot;X-RapidAPI-Key&quot;: &quot;cfb16a4106mshdbb9be413abfd1dp1aef68jsn13566184f01a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;google-translate1.p.rapidapi.com&quot; } response = requests.request(&quot;POST&quot;, url, data=payload, headers=headers) print(response.text) . {&#34;data&#34;:{&#34;detections&#34;:[[{&#34;confidence&#34;:1,&#34;language&#34;:&#34;en&#34;,&#34;isReliable&#34;:false}]]}} . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code import requests url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;jcmbea0fa2ff5msh7f14bf69be38ca6p175482jsn6c4988114560&quot;, # place your key here &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.text) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . {&#34;message&#34;:&#34;You are not subscribed to this API.&#34;} . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; Did you insert a valid key in X-RapidAPI-Key of API cell above? {&#39;message&#39;: &#39;You are not subscribed to this API.&#39;} . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | . Hacks . Find and use an API as part of your project. An API and a little coding logic will be a big step toward getting meaningful data for a project. There are many API providers, find one that might work for your project to complete this hack. When picking an API you are looking for something that will work with either JavaScript Fetch or Python Request. Here are some samples, these are not qualified in any way. . RapidAPI- GitHub Project | No Key APIs Article | Twitter Developer | Google Developer | Reddit Developer | . Show API and format results in either Web Page or Jupyter Notebook. Ultimately, I will expect that we do APIs in backend (Python/Flask). However, for this Hack you can pick your preference. We will discuss pros and cons in next API tech talk. .",
            "url": "https://clairechen3.github.io/clairerepos/techtalk/rapidapi",
            "relUrl": "/techtalk/rapidapi",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "College Board Assignment Check",
            "content": ". Things I did to improve . watch video (didn’t watch the right one the first time I took the quiz) | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/10/02/CBprogress.html",
            "relUrl": "/markdown/2022/10/02/CBprogress.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Scrum process",
            "content": ".",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/ScrumProcess.html",
            "relUrl": "/markdown/2022/09/25/ScrumProcess.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Java Usage",
            "content": "Navigation Bar | Java program | Java Usage | . } . Java Table . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/25/JavaUsage.html",
            "relUrl": "/markdown/2022/09/25/JavaUsage.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Java Script Kernel",
            "content": "Navigation Bar | Java program | Java Usage | . } . console.log(&quot;Hello, World!&quot;); . Hello, World! . var msg = &quot;Hello, World!&quot;; console.log(msg); . Hello, World! . function logIt(output) { console.log(output); } logIt(msg); . Hello, World! . console.log(&quot;Reuse of logIT&quot;) logIt(&quot;Hello, Students!&quot;); logIt(2022) . Reuse of logIT Hello, Students! 2022 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello&quot;); // String logItType(2020); // Number logItType([1, 2, 3]); // Object is generic for this Array, which similar to Python List . Looking at dynamic nature of types in JavaScript string ; hello number ; 2020 object ; [ 1, 2, 3 ] . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); teacher.setRole(&quot;Teacher&quot;); // output of Object and JSON/string associated with Teacher logItType(teacher); // object type is easy to work with in JavaScript logItType(teacher.toJSON()); // json/string is useful when passing data on internet . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Claire&quot;, &quot;ClaireChen3&quot;, 2024), new Person(&quot;Aliya&quot;, &quot;aliyatang&quot;, 2025), new Person(&quot;Sreeja&quot;, &quot;sreejagangapuram&quot;, 2024), new Person(&quot;Ananya&quot;, &quot;Ananayag2617&quot;, 2025), ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Claire&#39;, ghID: &#39;ClaireChen3&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Aliya&#39;, ghID: &#39;aliyatang&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Sreeja&#39;, ghID: &#39;sreejagangapuram&#39;, classOf: 2024, role: &#39;Student&#39; }, Person { name: &#39;Ananya&#39;, ghID: &#39;Ananayag2617&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;background:black;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Claire | ClaireChen3 | 2024 | Student | Aliya | aliyatang | 2025 | Student | Sreeja | sreejagangapuram | 2024 | Student | Ananya | Ananayag2617 | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "relUrl": "/markdown/week%205/2022/09/25/JavaScriptKernel.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Docker server",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/09/18/docker-server.html",
            "relUrl": "/markdown/2022/09/18/docker-server.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Psychology and the Good Life Video Notes",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "relUrl": "/markdown/week%204/2022/09/15/PsychologyNotes.html",
            "date": " • Sep 15, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Week 4 College Board Notes",
            "content": "Video 1: . companies like google collaborate to create a cohesive company (ios, android, art, social media) | collaboration helps us to compare or combine our ideas to | collaborating produces a computing innovation that reflects the diversity of talents and perspectives of those who designed it produce the best result. | . Video 2: . ways to collaborate in APCSP . pair programming one driver(types the program) | one observer(reviews drivers code) | . | Think, Pair, Share think about a problem alone | share with partner (help one another, compare) | share with class/others | . | leave comments in code( ) to communicate to yourself and others what the code is doing | clarify function of the code | . | get feedback from others | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "relUrl": "/markdown/week%204/2022/09/13/CBCollaboration-Notes.html",
            "date": " • Sep 13, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Creative Performance Task Outline",
            "content": "Ideas: . make an online recipe book | make a jewelry portfolio | . Program Purpose and Function . A blog-like program that has posts of each recipe ### Data Abstraction | Make &quot;flippable pages&quot; allow user to be able to flip through the posts like pages in a recipe book TOC? | Audio option? | Video instructions? ### Managing Complexity | . | use lists within code ### Procedural Abstraction | code for flippable pages (haven&#39;t figured it out yet) will help users navigate through the recipe book easily ### Algorithm Implementation | make libraries so you can call things out easily and keep code organized | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CreativePerformance.html",
            "relUrl": "/markdown/week%203/2022/09/11/CreativePerformance.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "App Lab Quiz",
            "content": "Link to my App Lab . Design . Purpose and function: . to quiz people on how well they now music albums of multiple genres #### Quiz Topic: | Guess the album name by the album cover #### Quiz Questions: | multiple choice (easy mode 2 questions) | free response (hard mode 2 questions) #### Quiz layout: picture of albums at the top and multiple choice answers below #### Special ideas: | easy and hard mode | add sound add hints | add gifs #### albums to use | Renaissance | Abbey Road | Anti | After Hours #### Successes: | adding sound! #### Discoveries | how to use set time function | how to use if then #### Challenges | coding free response questions | using the if then function, blocks are fun! | .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%203/2022/09/11/CodeQuiz.html",
            "relUrl": "/markdown/week%203/2022/09/11/CodeQuiz.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Python List",
            "content": "# variable of type string name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) # variable of type integer age = 18 print(&quot;age&quot;, age, type(age)) # variable of type float score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . name John Doe &lt;class &#39;str&#39;&gt; age 18 &lt;class &#39;int&#39;&gt; score 90.0 &lt;class &#39;float&#39;&gt; langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; - langs[0] Python &lt;class &#39;str&#39;&gt; person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . InfoDb = [] # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Sunny&quot;, &quot;LastName&quot;: &quot;Naidu&quot;, &quot;DOB&quot;: &quot;August 2&quot;, &quot;Residence&quot;: &quot;Temecula&quot;, &quot;Email&quot;: &quot;snaidu@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;4Runner&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Claire&quot;, &quot;LastName&quot;: &quot;Chen&quot;, &quot;DOB&quot;: &quot;August 19&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;claireweichingchen@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;none&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Sunny&#39;, &#39;LastName&#39;: &#39;Naidu&#39;, &#39;DOB&#39;: &#39;August 2&#39;, &#39;Residence&#39;: &#39;Temecula&#39;, &#39;Email&#39;: &#39;snaidu@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;4Runner&#39;]}, {&#39;FirstName&#39;: &#39;Claire&#39;, &#39;LastName&#39;: &#39;Chen&#39;, &#39;DOB&#39;: &#39;August 19&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;claireweichingchen@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;none&#39;]}] . def print_data(d_rec): print(d_rec[&quot;FirstName&quot;], d_rec[&quot;LastName&quot;]) # using comma puts space between values print(&quot; t&quot;, &quot;Residence:&quot;, d_rec[&quot;Residence&quot;]) # t is a tab indent print(&quot; t&quot;, &quot;Birth Day:&quot;, d_rec[&quot;DOB&quot;]) print(&quot; t&quot;, &quot;Cars: &quot;, end=&quot;&quot;) # end=&quot;&quot; make sure no return occurs print(&quot;, &quot;.join(d_rec[&quot;Owns_Cars&quot;])) # join allows printing a string list with separator print() # for loop iterates on length of InfoDb def for_loop(): print(&quot;For loop output n&quot;) for record in InfoDb: print_data(record) for_loop() . For loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none . def recursive_loop(i): if i &lt; len(InfoDb): record = InfoDb[i] print_data(record) recursive_loop(i + 1) return print(&quot;Recursive loop output n&quot;) recursive_loop(0) . Recursive loop output John Mortensen Residence: San Diego Birth Day: October 21 Cars: 2015-Fusion, 2011-Ranger, 2003-Excursion, 1997-F350, 1969-Cadillac Sunny Naidu Residence: Temecula Birth Day: August 2 Cars: 4Runner Claire Chen Residence: San Diego Birth Day: August 19 Cars: none .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%202/2022/08/30/PythonList.html",
            "relUrl": "/markdown/week%202/2022/08/30/PythonList.html",
            "date": " • Aug 30, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Alumni Panel Notes",
            "content": "How did you realize you want to do cs . Mechanical engineering is different than computer science | create functions, programs and algorithms. | CSA can help solidify your knowledge on computer science | Might not be easy but important to learn | Many different majors require programming experience and logical thinking background | Cog sci is psychology+computer science UX UI | Get technical skill from computer science | . | In csa you can learn how to apply programming skills She realized what she was creating could be used in real world | . | . Hardest part . Having error messages (syntax errors) Solution: try to google search it | . | Egos People are not very kind and brag | Solution: focus on you own path | . | Theory behind CS | Different structures | HS to college compsci is different | Hard to find the motivation Feeling not good enough | Solution: having a purpose to apply cs to | . | Programming logic (syntax) | Starting compsci later (as a senior) Solution: having mindset to go above and beyond | . | Not having an organized structure Solution: don&#39;t get so stuck on a plan, just start coding | . | . Project based learning . Will see in... . operative courses | Computer science major | Most UCs | Study in groups and work with others | . Apply compsci in non-compsci majors? . Copy pasting and converting data types | Can do advanced calculations | Program analysis | graphing/statistics (R ) | . Job with school or professor . Go to office hours | Set yourself apart from the other students (go above and beyond) | TA, code ninjas, LG, | . Resume done by early september for internships Build networks .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "relUrl": "/markdown/week%201/2022/08/29/AlumniPanelNotes.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Installation Checks",
            "content": "Python Check . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Conda Packages . conda list . # packages in environment at /home/claire/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/claire/.local/share/jupyter/kernels/python3 . Jupyter Checks . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.4.0 ipykernel : 6.15.1 ipywidgets : not installed jupyter_client : 7.3.4 jupyter_core : 4.11.1 jupyter_server : not installed jupyterlab : not installed nbclient : not installed nbconvert : not installed nbformat : not installed notebook : not installed qtconsole : not installed traitlets : 5.3.0 Available kernels: bash /home/claire/.local/share/jupyter/kernels/bash javascript /home/claire/.local/share/jupyter/kernels/javascript python3 /home/claire/.local/share/jupyter/kernels/python3 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/28/InstallationCheck.html",
            "relUrl": "/markdown/week%201/2022/08/28/InstallationCheck.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Python Quiz",
            "content": "import getpass, sys def question_and_answer(prompt): print(&quot;Question: &quot; + prompt) msg = input() print(&quot;Answer: &quot; + msg) def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 2 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_and_answer(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What is the key word to define a function?&quot;) if rsp == &quot;def&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;what input returns an output back to the user&quot;) if rsp == &quot;msg&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, claire running /bin/python3 You will be asked 2 questions. Question: Are you ready to take a test? Answer: Question: What is the key word to define a function? def is correct! Question: what input returns an output back to the user def is incorrect! claire you scored 1/2 .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/26/PythonQuiz.html",
            "relUrl": "/markdown/week%201/2022/08/26/PythonQuiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Python Hello",
            "content": "python print hello . - toc: true - branch: master - badges: true - comments: true - author: Claire Chen - categories: [fastpages, jupyter] . print (&quot;hello&quot;) . hello . msg = input(&quot;Enter a greeting: &quot;) print(msg) . hello .",
            "url": "https://clairechen3.github.io/clairerepos/markdown/week%201/2022/08/24/PythonHello.html",
            "relUrl": "/markdown/week%201/2022/08/24/PythonHello.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Markdown Post",
            "content": "",
            "url": "https://clairechen3.github.io/clairerepos/markdown/2022/08/22/Markdown.html",
            "relUrl": "/markdown/2022/08/22/Markdown.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus . +1 | 00000000 | 0 | 0 | 0 | -1 | . Turn on | Turn on | Turn on | . | | | . | | | . | . .",
            "url": "https://clairechen3.github.io/clairerepos/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Jul 7, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "Claire's Markdown Post",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-22-Markdown.html",
          "relUrl": "/_pages/2022-08-22-Markdown.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Claire's Jupyter Notebook",
          "content": "",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-26-Jupyter.html",
          "relUrl": "/_pages/2022-08-26-Jupyter.html",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Vocab",
          "content": "Terms to Know . input = instructions you give to a computer | output = information computer gives to you | sequence = several lines of code together | . Python Linux Commands . pwd = print working directory | cd = change directory | mkdir = make directory | ls = list directory | Python syntax print(“”) | .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-08-29-Vocab.html",
          "relUrl": "/_pages/2022-08-29-Vocab.html",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Class Progress",
          "content": "Week Topics Notes . 3 😴 | Lists, dictionaries, loops, tables and tags | Links | . 2 🤨 | Lists, dictionaries, loops, tables and tags | Links | . 1 🤧 | Python hello, Python quiz, Python commands, Bash and Tools check | Links | . 0 😐 | Install: VScode, IDE, Jupyter, Python, Anaconda, wsl, kernels | Links | .",
          "url": "https://clairechen3.github.io/clairerepos/Class%20Progress",
          "relUrl": "/Class Progress",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Submenu",
          "content": "My Javascript Kernel API .",
          "url": "https://clairechen3.github.io/clairerepos/_pages/2022-09-26-Submenu.html",
          "relUrl": "/_pages/2022-09-26-Submenu.html",
          "date": ""
      }
      
  

  

  
      ,"page6": {
          "title": "About Me",
          "content": "I am Claire, a junior at Del Norte High School taking APCSP:) .",
          "url": "https://clairechen3.github.io/clairerepos/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  
  

  
      ,"page18": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://clairechen3.github.io/clairerepos/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}